import { table } from 'env';
import { __lock } from 'env';
import { __unlock } from 'env';
import { fd_write } from 'wasi_snapshot_preview1';
import { emscripten_resize_heap } from 'env';
import { emscripten_memcpy_big } from 'env';
import { __handle_stack_overflow } from 'env';
import { setTempRet0 } from 'env';

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "Qm9tYiBleHBsb2RlZCA6KCBCZSBhIGxpdHRsZSBtb3JlIGNhcmVmdWwgbmV4dCB0aW1lLCB3aWxsIHlhPwAAAEgFAAA=");
  base64DecodeToExistingUint8Array(bufferView, 1104, "eQAAAEkAAACKAAAAawAAALgAAADZAAAA8gAAAC4AAABdAAAAcQAAAFoAAACTAAAA+AAAAFwAAAA8AAAAagAAAHsAAABQAAAACwAAANsAAACGAAAAPgAAADwAAADQAAAAFQAAADcAAADoAAAAHwAAABUAAABFAAAAAAAAAAAAAAAeAAAAOwAAAO8AAAASAAAA0AAAALgAAACGAAAAXQAAACYAAAAmAAAAMgAAAKMAAACnAAAAMgAAAA8AAABZAAAAPwAAAGUAAABUAAAAugAAANkAAABOAAAACAAAAKIAAABBAAAAWQAAAK0AAABNAAAAaAAAAEUAAAAFAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAwAAAPgFAAAABAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAK/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIBQAA");
  base64DecodeToExistingUint8Array(bufferView
}
function asmFunc(env) {
 var memory = env.memory;
 var buffer = memory.buffer;
 var FUNCTION_TABLE = env.table;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 var __lock = env.__lock;
 var __unlock = env.__unlock;
 var __wasi_fd_write = env.fd_write;
 var emscripten_resize_heap = env.emscripten_resize_heap;
 var emscripten_memcpy_big = env.emscripten_memcpy_big;
 var __handle_stack_overflow = env.__handle_stack_overflow;
 var setTempRet0 = env.setTempRet0;
 var global$0 = 5245952;
 var global$1 = 3060;
 var global$2 = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 function emscripten_get_sbrk_ptr() {
  return 3072 | 0;
 }
 
 function __wasm_call_ctors() {
  
 }
 
 function getWireIndex($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $15 = 0, $17 = 0, $26 = 0, $54 = 0, $80 = 0, $124 = 0, $133 = 0, $157 = 0, $170 = 0, $200 = 0, $229 = 0;
  $4 = global$0 - 96 | 0;
  $5 = 0;
  HEAP32[($4 + 88 | 0) >> 2] = $0;
  HEAP32[($4 + 84 | 0) >> 2] = $1;
  HEAP32[($4 + 80 | 0) >> 2] = $5;
  HEAP32[($4 + 76 | 0) >> 2] = $5;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4 + 76 | 0) >> 2] | 0 | 0) < (HEAP32[($4 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $15 = (HEAP32[($4 + 88 | 0) >> 2] | 0) + (HEAP32[($4 + 76 | 0) >> 2] | 0) | 0;
    $17 = 24;
    HEAP8[$15 >> 0] = (((HEAPU8[$15 >> 0] | 0) << $17 | 0) >> $17 | 0) - 48 | 0;
    $26 = 24;
    label$3 : {
     if (((HEAPU8[((HEAP32[($4 + 88 | 0) >> 2] | 0) + (HEAP32[($4 + 76 | 0) >> 2] | 0) | 0) >> 0] | 0) << $26 | 0) >> $26 | 0) {
      break label$3
     }
     HEAP32[($4 + 80 | 0) >> 2] = (HEAP32[($4 + 80 | 0) >> 2] | 0) + 1 | 0;
    }
    HEAP32[($4 + 76 | 0) >> 2] = (HEAP32[($4 + 76 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  label$4 : {
   label$5 : {
    label$6 : {
     if (!((HEAP32[($4 + 80 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[($4 + 72 | 0) >> 2] = 0;
     label$7 : {
      label$8 : while (1) {
       if (!((HEAP32[($4 + 72 | 0) >> 2] | 0 | 0) < (HEAP32[($4 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$7
       }
       $54 = 24;
       label$9 : {
        if (((HEAPU8[((HEAP32[($4 + 88 | 0) >> 2] | 0) + (HEAP32[($4 + 72 | 0) >> 2] | 0) | 0) >> 0] | 0) << $54 | 0) >> $54 | 0) {
         break label$9
        }
        HEAP8[($4 + 95 | 0) >> 0] = HEAP32[($4 + 72 | 0) >> 2] | 0;
        break label$4;
       }
       HEAP32[($4 + 72 | 0) >> 2] = (HEAP32[($4 + 72 | 0) >> 2] | 0) + 1 | 0;
       continue label$8;
      };
     }
     break label$5;
    }
    label$10 : {
     if (HEAP32[($4 + 80 | 0) >> 2] | 0) {
      break label$10
     }
     label$11 : {
      if (!((HEAP32[($4 + 84 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
       break label$11
      }
      HEAP8[($4 + 95 | 0) >> 0] = 2;
      break label$4;
     }
     label$12 : {
      if (!((HEAP32[($4 + 84 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
       break label$12
      }
      $80 = 24;
      label$13 : {
       if (!((((HEAPU8[((HEAP32[($4 + 88 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $80 | 0) >> $80 | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$13
       }
       HEAP8[($4 + 95 | 0) >> 0] = 0;
       break label$4;
      }
      HEAP32[($4 + 44 | 0) >> 2] = 0;
      label$14 : {
       label$15 : while (1) {
        if (!((HEAP32[($4 + 44 | 0) >> 2] | 0 | 0) < (5 | 0) & 1 | 0)) {
         break label$14
        }
        HEAP32[(($4 + 48 | 0) + ((HEAP32[($4 + 44 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
        HEAP32[($4 + 44 | 0) >> 2] = (HEAP32[($4 + 44 | 0) >> 2] | 0) + 1 | 0;
        continue label$15;
       };
      }
      HEAP32[($4 + 40 | 0) >> 2] = 0;
      label$16 : {
       label$17 : while (1) {
        if (!((HEAP32[($4 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($4 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$16
        }
        $124 = 24;
        HEAP32[(($4 + 48 | 0) + ((((HEAPU8[((HEAP32[($4 + 88 | 0) >> 2] | 0) + (HEAP32[($4 + 40 | 0) >> 2] | 0) | 0) >> 0] | 0) << $124 | 0) >> $124 | 0) << 2 | 0) | 0) >> 2] = 1;
        HEAP32[($4 + 40 | 0) >> 2] = (HEAP32[($4 + 40 | 0) >> 2] | 0) + 1 | 0;
        continue label$17;
       };
      }
      $133 = 0;
      HEAP32[($4 + 36 | 0) >> 2] = $133;
      HEAP32[($4 + 32 | 0) >> 2] = $133;
      label$18 : {
       label$19 : while (1) {
        if (!((HEAP32[($4 + 32 | 0) >> 2] | 0 | 0) < (5 | 0) & 1 | 0)) {
         break label$18
        }
        HEAP32[($4 + 36 | 0) >> 2] = (HEAP32[($4 + 36 | 0) >> 2] | 0) + (HEAP32[(($4 + 48 | 0) + ((HEAP32[($4 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0;
        HEAP32[($4 + 32 | 0) >> 2] = (HEAP32[($4 + 32 | 0) >> 2] | 0) + 1 | 0;
        continue label$19;
       };
      }
      HEAP8[($4 + 95 | 0) >> 0] = (HEAP32[($4 + 36 | 0) >> 2] | 0) - 1 | 0;
      break label$4;
     }
     $157 = 0;
     HEAP32[($4 + 28 | 0) >> 2] = $157;
     HEAP32[($4 + 20 | 0) >> 2] = $157;
     label$20 : {
      label$21 : while (1) {
       if (!((HEAP32[($4 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($4 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$20
       }
       $170 = 24;
       label$22 : {
        if (!((((HEAPU8[((HEAP32[($4 + 88 | 0) >> 2] | 0) + (HEAP32[($4 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0) << $170 | 0) >> $170 | 0 | 0) == (3 | 0) & 1 | 0)) {
         break label$22
        }
        HEAP32[($4 + 28 | 0) >> 2] = (HEAP32[($4 + 28 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($4 + 24 | 0) >> 2] = HEAP32[($4 + 20 | 0) >> 2] | 0;
       }
       HEAP32[($4 + 20 | 0) >> 2] = (HEAP32[($4 + 20 | 0) >> 2] | 0) + 1 | 0;
       continue label$21;
      };
     }
     label$23 : {
      if (!(HEAP32[($4 + 28 | 0) >> 2] | 0)) {
       break label$23
      }
      HEAP8[($4 + 95 | 0) >> 0] = ((HEAP32[($4 + 24 | 0) >> 2] | 0) - 1 | 0 | 0) % (HEAP32[($4 + 84 | 0) >> 2] | 0 | 0) | 0;
      break label$4;
     }
     HEAP8[($4 + 95 | 0) >> 0] = 3;
     break label$4;
    }
    label$24 : {
     if (!((HEAP32[($4 + 84 | 0) >> 2] | 0 | 0) == (5 | 0) & 1 | 0)) {
      break label$24
     }
     HEAP8[($4 + 95 | 0) >> 0] = 3;
     break label$4;
    }
    $200 = 0;
    HEAP32[($4 + 16 | 0) >> 2] = $200;
    HEAP32[($4 + 12 | 0) >> 2] = $200;
    label$25 : {
     label$26 : while (1) {
      if (!((HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($4 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$25
      }
      label$27 : {
       if (!(((HEAPU8[((HEAP32[($4 + 88 | 0) >> 2] | 0) + (HEAP32[($4 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
        break label$27
       }
       HEAP32[($4 + 16 | 0) >> 2] = (HEAP32[($4 + 16 | 0) >> 2] | 0) + 1 | 0;
      }
      HEAP32[($4 + 12 | 0) >> 2] = (HEAP32[($4 + 12 | 0) >> 2] | 0) + 1 | 0;
      continue label$26;
     };
    }
    HEAP8[($4 + 95 | 0) >> 0] = HEAP32[($4 + 16 | 0) >> 2] | 0;
    break label$4;
   }
   HEAP8[($4 + 95 | 0) >> 0] = 255;
  }
  $229 = 24;
  return ((HEAPU8[($4 + 95 | 0) >> 0] | 0) << $229 | 0) >> $229 | 0 | 0;
 }
 
 function cc($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $22 = 0, $28 = 0, $46 = 0, $45 = 0;
  $6 = global$0 - 32 | 0;
  label$1 : {
   $45 = $6;
   if ($6 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $45;
  }
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAP32[($6 + 20 | 0) >> 2] = $2;
  HEAP32[($6 + 16 | 0) >> 2] = $3;
  HEAP8[($6 + 15 | 0) >> 0] = getWireIndex(HEAP32[($6 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6 + 8 | 0) >> 2] = 0;
  label$3 : {
   label$4 : {
    label$5 : while (1) {
     if (!((HEAP32[($6 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($6 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     $22 = 24;
     $28 = 24;
     label$6 : {
      if (!(((((HEAPU8[((HEAP32[($6 + 28 | 0) >> 2] | 0) + (HEAP32[($6 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) << $22 | 0) >> $22 | 0) - 48 | 0 | 0) != (((HEAPU8[($6 + 15 | 0) >> 0] | 0) << $28 | 0) >> $28 | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP8[(0 + 1504 | 0) >> 0] = 2;
      break label$3;
     }
     HEAP32[($6 + 8 | 0) >> 2] = (HEAP32[($6 + 8 | 0) >> 2] | 0) + 1 | 0;
     continue label$5;
    };
   }
   HEAP8[(0 + 1504 | 0) >> 0] = 1;
  }
  label$7 : {
   $46 = $6 + 32 | 0;
   if ($46 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $46;
  }
  return;
 }
 
 function func($0) {
  $0 = $0 | 0;
  var $3 = 0, $38 = 0, $71 = 0, $89 = 0, $98 = 0, $114 = 0, $113 = 0, $96 = 0, $97 = 0, $110 = 0;
  $3 = global$0 - 64 | 0;
  label$1 : {
   $113 = $3;
   if ($3 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $113;
  }
  HEAP32[($3 + 60 | 0) >> 2] = $0;
  HEAP32[($3 + 28 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($3 + 28 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[(($3 + 32 | 0) + ((HEAP32[($3 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 1;
    HEAP32[($3 + 28 | 0) >> 2] = (HEAP32[($3 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  HEAP32[($3 + 24 | 0) >> 2] = dlmalloc(5 | 0) | 0;
  HEAP32[($3 + 20 | 0) >> 2] = 0;
  HEAP32[($3 + 60 | 0) >> 2] = (HEAP32[($3 + 60 | 0) >> 2] | 0 | 0) % (24 | 0) | 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($3 + 20 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
     break label$5
    }
    $38 = 0;
    HEAP32[($3 + 16 | 0) >> 2] = $38;
    HEAP32[($3 + 12 | 0) >> 2] = $38;
    HEAP32[($3 + 8 | 0) >> 2] = 1;
    HEAP32[($3 + 4 | 0) >> 2] = 2;
    label$7 : {
     label$8 : while (1) {
      if (!((HEAP32[($3 + 4 | 0) >> 2] | 0 | 0) <= (3 - (HEAP32[($3 + 20 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP32[($3 + 8 | 0) >> 2] = Math_imul(HEAP32[($3 + 8 | 0) >> 2] | 0, HEAP32[($3 + 4 | 0) >> 2] | 0);
      HEAP32[($3 + 4 | 0) >> 2] = (HEAP32[($3 + 4 | 0) >> 2] | 0) + 1 | 0;
      continue label$8;
     };
    }
    label$9 : {
     label$10 : while (1) {
      if (!((HEAP32[($3 + 16 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
       break label$9
      }
      label$11 : {
       label$12 : {
        if (HEAP32[(($3 + 32 | 0) + ((HEAP32[($3 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) {
         break label$12
        }
        break label$11;
       }
       $71 = (HEAP32[($3 + 12 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($3 + 12 | 0) >> 2] = $71;
       label$13 : {
        if (!((Math_imul($71, HEAP32[($3 + 8 | 0) >> 2] | 0) | 0) > (HEAP32[($3 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$13
        }
        break label$9;
       }
      }
      HEAP32[($3 + 16 | 0) >> 2] = (HEAP32[($3 + 16 | 0) >> 2] | 0) + 1 | 0;
      continue label$10;
     };
    }
    $89 = (HEAP32[($3 + 12 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($3 + 12 | 0) >> 2] = $89;
    HEAP32[($3 + 60 | 0) >> 2] = (HEAP32[($3 + 60 | 0) >> 2] | 0) - Math_imul($89, HEAP32[($3 + 8 | 0) >> 2] | 0) | 0;
    $96 = (HEAP32[($3 + 16 | 0) >> 2] | 0) + 65 | 0;
    $97 = HEAP32[($3 + 24 | 0) >> 2] | 0;
    $98 = HEAP32[($3 + 20 | 0) >> 2] | 0;
    HEAP32[($3 + 20 | 0) >> 2] = $98 + 1 | 0;
    HEAP8[($97 + $98 | 0) >> 0] = $96;
    HEAP32[(($3 + 32 | 0) + ((HEAP32[($3 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
    continue label$6;
   };
  }
  HEAP8[((HEAP32[($3 + 24 | 0) >> 2] | 0) + (HEAP32[($3 + 20 | 0) >> 2] | 0) | 0) >> 0] = 0;
  $110 = HEAP32[($3 + 24 | 0) >> 2] | 0;
  label$14 : {
   $114 = $3 + 64 | 0;
   if ($114 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $114;
  }
  return $110 | 0;
 }
 
 function ca($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $18 = 0, $21 = 0, $34 = 0, $41 = 0, $78 = 0, $77 = 0;
  $5 = global$0 - 32 | 0;
  label$1 : {
   $77 = $5;
   if ($5 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $77;
  }
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAP32[($5 + 24 | 0) >> 2] = $1;
  HEAP32[($5 + 20 | 0) >> 2] = $2;
  HEAP32[($5 + 16 | 0) >> 2] = func(HEAP32[($5 + 20 | 0) >> 2] | 0 | 0) | 0;
  HEAP8[($5 + 15 | 0) >> 0] = 1;
  HEAP32[($5 + 8 | 0) >> 2] = 0;
  label$3 : while (1) {
   $18 = 0;
   label$4 : {
    if (!((HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($5 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    $21 = 24;
    $18 = (((HEAPU8[($5 + 15 | 0) >> 0] | 0) << $21 | 0) >> $21 | 0 | 0) != (0 | 0);
   }
   label$5 : {
    if (!($18 & 1 | 0)) {
     break label$5
    }
    $34 = 24;
    $41 = 24;
    label$6 : {
     if (!((((HEAPU8[((HEAP32[($5 + 28 | 0) >> 2] | 0) + (HEAP32[($5 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) << $34 | 0) >> $34 | 0 | 0) != (((HEAPU8[((HEAP32[($5 + 16 | 0) >> 2] | 0) + (HEAP32[($5 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) << $41 | 0) >> $41 | 0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP8[($5 + 15 | 0) >> 0] = 0;
    }
    HEAP32[($5 + 8 | 0) >> 2] = (HEAP32[($5 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   }
   break label$3;
  };
  label$7 : {
   label$8 : {
    if (((HEAPU8[($5 + 15 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0) {
     break label$8
    }
    HEAP8[(0 + 1505 | 0) >> 0] = 2;
    break label$7;
   }
   label$9 : {
    label$10 : {
     if (!((HEAP32[($5 + 24 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
      break label$10
     }
     HEAP8[(0 + 1505 | 0) >> 0] = 1;
     break label$9;
    }
    HEAP8[(0 + 1505 | 0) >> 0] = 0;
   }
  }
  label$11 : {
   $78 = $5 + 32 | 0;
   if ($78 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $78;
  }
  return;
 }
 
 function cb($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $9 = 0, $16 = 0, $24 = 0, $32 = 0, $46 = 0, $53 = 0;
  $5 = global$0 - 32 | 0;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAP32[($5 + 24 | 0) >> 2] = $1;
  HEAP32[($5 + 20 | 0) >> 2] = $2;
  $9 = 24;
  $16 = 24;
  $24 = 24;
  $32 = 24;
  HEAP8[($5 + 19 | 0) >> 0] = ((((((HEAPU8[(HEAP32[($5 + 20 | 0) >> 2] | 0) >> 0] | 0) << $9 | 0) >> $9 | 0) - 65 | 0) ^ ((((HEAPU8[((HEAP32[($5 + 20 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $16 | 0) >> $16 | 0) - 65 | 0) | 0) ^ ((((HEAPU8[((HEAP32[($5 + 20 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) << $24 | 0) >> $24 | 0) - 65 | 0) | 0) ^ ((((HEAPU8[((HEAP32[($5 + 20 | 0) >> 2] | 0) + 7 | 0) >> 0] | 0) << $32 | 0) >> $32 | 0) - 65 | 0) | 0;
  HEAP32[($5 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($5 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     $46 = 24;
     $53 = 24;
     label$4 : {
      if (!((((HEAPU8[($5 + 19 | 0) >> 0] | 0) << $46 | 0) >> $46 | 0 | 0) == ((((HEAPU8[((HEAP32[($5 + 28 | 0) >> 2] | 0) + (HEAP32[($5 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0) << $53 | 0) >> $53 | 0) - 48 | 0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP8[(0 + 1506 | 0) >> 0] = 1;
      break label$1;
     }
     HEAP32[($5 + 12 | 0) >> 2] = (HEAP32[($5 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   HEAP8[(0 + 1506 | 0) >> 0] = 2;
  }
  return;
 }
 
 function check() {
  var $2 = 0, $5 = 0, $12 = 0, $19 = 0, $27 = 0, $34 = 0, $41 = 0, $82 = 0, $81 = 0, $78 = 0;
  $2 = global$0 - 16 | 0;
  label$1 : {
   $81 = $2;
   if ($2 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $81;
  }
  $5 = 24;
  label$3 : {
   label$4 : {
    label$5 : {
     if ((((HEAPU8[(0 + 1504 | 0) >> 0] | 0) << $5 | 0) >> $5 | 0) & 2 | 0) {
      break label$5
     }
     $12 = 24;
     if ((((HEAPU8[(0 + 1505 | 0) >> 0] | 0) << $12 | 0) >> $12 | 0) & 2 | 0) {
      break label$5
     }
     $19 = 24;
     if (!((((HEAPU8[(0 + 1506 | 0) >> 0] | 0) << $19 | 0) >> $19 | 0) & 2 | 0)) {
      break label$4
     }
    }
    HEAP32[($2 + 12 | 0) >> 2] = 1024;
    break label$3;
   }
   $27 = 24;
   label$6 : {
    if (!((((HEAPU8[(0 + 1504 | 0) >> 0] | 0) << $27 | 0) >> $27 | 0) & 1 | 0)) {
     break label$6
    }
    $34 = 24;
    if (!((((HEAPU8[(0 + 1505 | 0) >> 0] | 0) << $34 | 0) >> $34 | 0) & 1 | 0)) {
     break label$6
    }
    $41 = 24;
    if (!((((HEAPU8[(0 + 1506 | 0) >> 0] | 0) << $41 | 0) >> $41 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($2 + 8 | 0) >> 2] = dlmalloc(30 | 0) | 0;
    HEAP32[($2 + 4 | 0) >> 2] = 0;
    label$7 : {
     label$8 : while (1) {
      if (!((HEAP32[($2 + 4 | 0) >> 2] | 0 | 0) < (30 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP8[((HEAP32[($2 + 8 | 0) >> 2] | 0) + (HEAP32[($2 + 4 | 0) >> 2] | 0) | 0) >> 0] = (HEAP32[(1232 + ((HEAP32[($2 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) ^ (HEAP32[(1104 + ((HEAP32[($2 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0;
      HEAP32[($2 + 4 | 0) >> 2] = (HEAP32[($2 + 4 | 0) >> 2] | 0) + 1 | 0;
      continue label$8;
     };
    }
    puts(HEAP32[($2 + 8 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($2 + 12 | 0) >> 2] = HEAP32[($2 + 8 | 0) >> 2] | 0;
    break label$3;
   }
   HEAP32[($2 + 12 | 0) >> 2] = 1086;
  }
  $78 = HEAP32[($2 + 12 | 0) >> 2] | 0;
  label$9 : {
   $82 = $2 + 16 | 0;
   if ($82 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $82;
  }
  return $78 | 0;
 }
 
 function __lockfile($0) {
  $0 = $0 | 0;
  return 1 | 0;
 }
 
 function __unlockfile($0) {
  $0 = $0 | 0;
 }
 
 function puts($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0;
  $1 = 0;
  label$1 : {
   $2 = HEAP32[(0 + 1088 | 0) >> 2] | 0;
   if ((HEAP32[($2 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $1 = __lockfile($2 | 0) | 0;
  }
  label$2 : {
   label$3 : {
    if ((fputs($0 | 0, $2 | 0) | 0 | 0) >= (0 | 0)) {
     break label$3
    }
    $0 = -1;
    break label$2;
   }
   label$4 : {
    if ((HEAPU8[($2 + 75 | 0) >> 0] | 0 | 0) == (10 | 0)) {
     break label$4
    }
    $0 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    if ($0 >>> 0 >= (HEAP32[($2 + 16 | 0) >> 2] | 0) >>> 0) {
     break label$4
    }
    HEAP32[($2 + 20 | 0) >> 2] = $0 + 1 | 0;
    HEAP8[$0 >> 0] = 10;
    $0 = 0;
    break label$2;
   }
   $0 = (__overflow($2 | 0, 10 | 0) | 0) >> 31 | 0;
  }
  label$5 : {
   if (!$1) {
    break label$5
   }
   __unlockfile($2 | 0);
  }
  return $0 | 0;
 }
 
 function strlen($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = $0;
  label$1 : {
   label$2 : {
    if (!($1 & 3 | 0)) {
     break label$2
    }
    label$3 : {
     if (HEAPU8[$0 >> 0] | 0) {
      break label$3
     }
     $1 = $0;
     break label$1;
    }
    $1 = $0;
    label$4 : while (1) {
     $1 = $1 + 1 | 0;
     if (!($1 & 3 | 0)) {
      break label$2
     }
     if (!(HEAPU8[$1 >> 0] | 0)) {
      break label$1
     }
     continue label$4;
    };
   }
   label$5 : while (1) {
    $2 = $1;
    $1 = $1 + 4 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    if (!((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$5
    }
    break label$5;
   };
   label$6 : {
    if ($3 & 255 | 0) {
     break label$6
    }
    $1 = $2;
    break label$1;
   }
   label$7 : while (1) {
    $3 = HEAPU8[($2 + 1 | 0) >> 0] | 0;
    $1 = $2 + 1 | 0;
    $2 = $1;
    if ($3) {
     continue label$7
    }
    break label$7;
   };
  }
  return $1 - $0 | 0 | 0;
 }
 
 function __ofl_lock() {
  __lock(1508 | 0);
  return 1516 | 0;
 }
 
 function __ofl_unlock() {
  __unlock(1508 | 0);
 }
 
 function __towrite($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAPU8[($0 + 74 | 0) >> 0] | 0;
  HEAP8[($0 + 74 | 0) >> 0] = $1 + -1 | 0 | $1 | 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!($1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0 >> 2] = $1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = 0;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  $1 = HEAP32[($0 + 44 | 0) >> 2] | 0;
  HEAP32[($0 + 28 | 0) >> 2] = $1;
  HEAP32[($0 + 20 | 0) >> 2] = $1;
  HEAP32[($0 + 16 | 0) >> 2] = $1 + (HEAP32[($0 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function __fwritex($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  label$1 : {
   label$2 : {
    $3 = HEAP32[($2 + 16 | 0) >> 2] | 0;
    if ($3) {
     break label$2
    }
    $4 = 0;
    if (__towrite($2 | 0) | 0) {
     break label$1
    }
    $3 = HEAP32[($2 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    if (($3 - $5 | 0) >>> 0 >= $1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2 + 36 | 0) >> 2] | 0 | 0]($2, $0, $1) | 0 | 0;
   }
   $6 = 0;
   label$4 : {
    if ((HEAP8[($2 + 75 | 0) >> 0] | 0 | 0) < (0 | 0)) {
     break label$4
    }
    $4 = $1;
    label$5 : while (1) {
     $3 = $4;
     if (!$3) {
      break label$4
     }
     $4 = $3 + -1 | 0;
     if ((HEAPU8[($0 + $4 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      continue label$5
     }
     break label$5;
    };
    $4 = FUNCTION_TABLE[HEAP32[($2 + 36 | 0) >> 2] | 0 | 0]($2, $0, $3) | 0;
    if ($4 >>> 0 < $3 >>> 0) {
     break label$1
    }
    $1 = $1 - $3 | 0;
    $0 = $0 + $3 | 0;
    $5 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    $6 = $3;
   }
   memcpy($5 | 0, $0 | 0, $1 | 0) | 0;
   HEAP32[($2 + 20 | 0) >> 2] = (HEAP32[($2 + 20 | 0) >> 2] | 0) + $1 | 0;
   $4 = $6 + $1 | 0;
  }
  return $4 | 0;
 }
 
 function fwrite($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = Math_imul($2, $1);
  label$1 : {
   label$2 : {
    if ((HEAP32[($3 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $0 = __fwritex($0 | 0, $4 | 0, $3 | 0) | 0;
    break label$1;
   }
   $5 = __lockfile($3 | 0) | 0;
   $0 = __fwritex($0 | 0, $4 | 0, $3 | 0) | 0;
   if (!$5) {
    break label$1
   }
   __unlockfile($3 | 0);
  }
  label$3 : {
   if (($0 | 0) != ($4 | 0)) {
    break label$3
   }
   return ($1 ? $2 : 0) | 0;
  }
  return ($0 >>> 0) / ($1 >>> 0) | 0 | 0;
 }
 
 function fputs($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = strlen($0 | 0) | 0;
  return (($2 | 0) != (fwrite($0 | 0, 1 | 0, $2 | 0, $1 | 0) | 0 | 0) ? -1 : 0) | 0;
 }
 
 function __emscripten_stdout_close($0) {
  $0 = $0 | 0;
  return 0 | 0;
 }
 
 function __emscripten_stdout_seek($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function __stdio_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $7 = 0, $6 = 0, $8 = 0, $10 = 0, $9 = 0;
  label$1 : {
   $3 = global$0 - 32 | 0;
   $9 = $3;
   if ($3 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $9;
  }
  $4 = HEAP32[($0 + 28 | 0) >> 2] | 0;
  HEAP32[($3 + 16 | 0) >> 2] = $4;
  $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
  HEAP32[($3 + 28 | 0) >> 2] = $2;
  HEAP32[($3 + 24 | 0) >> 2] = $1;
  $1 = $5 - $4 | 0;
  HEAP32[($3 + 20 | 0) >> 2] = $1;
  $5 = $1 + $2 | 0;
  $6 = 2;
  $1 = $3 + 16 | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (__wasi_syscall_ret(__wasi_fd_write(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, 2 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0) {
       break label$6
      }
      label$7 : while (1) {
       $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
       if (($5 | 0) == ($4 | 0)) {
        break label$5
       }
       if (($4 | 0) <= (-1 | 0)) {
        break label$4
       }
       $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       $8 = $4 >>> 0 > $7 >>> 0;
       $1 = $8 ? $1 + 8 | 0 : $1;
       $7 = $4 - ($8 ? $7 : 0) | 0;
       HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + $7 | 0;
       HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) - $7 | 0;
       $5 = $5 - $4 | 0;
       $6 = $6 - $8 | 0;
       if (!(__wasi_syscall_ret(__wasi_fd_write(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $1 | 0, $6 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$7
       }
       break label$7;
      };
     }
     HEAP32[($3 + 12 | 0) >> 2] = -1;
     if (($5 | 0) != (-1 | 0)) {
      break label$4
     }
    }
    $1 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    HEAP32[($0 + 28 | 0) >> 2] = $1;
    HEAP32[($0 + 20 | 0) >> 2] = $1;
    HEAP32[($0 + 16 | 0) >> 2] = $1 + (HEAP32[($0 + 48 | 0) >> 2] | 0) | 0;
    $4 = $2;
    break label$3;
   }
   $4 = 0;
   HEAP32[($0 + 28 | 0) >> 2] = 0;
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   HEAP32[($0 + 20 | 0) >> 2] = 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 0 | 32 | 0;
   if (($6 | 0) == (2 | 0)) {
    break label$3
   }
   $4 = $2 - (HEAP32[($1 + 4 | 0) >> 2] | 0) | 0;
  }
  label$8 : {
   $10 = $3 + 32 | 0;
   if ($10 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $10;
  }
  return $4 | 0;
 }
 
 function __overflow($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0, $6 = 0, $5 = 0;
  label$1 : {
   $2 = global$0 - 16 | 0;
   $5 = $2;
   if ($2 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $5;
  }
  HEAP8[($2 + 15 | 0) >> 0] = $1;
  label$3 : {
   label$4 : {
    $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    if ($3) {
     break label$4
    }
    $3 = -1;
    if (__towrite($0 | 0) | 0) {
     break label$3
    }
    $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   }
   label$5 : {
    $4 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    if ($4 >>> 0 >= $3 >>> 0) {
     break label$5
    }
    $3 = $1 & 255 | 0;
    if (($3 | 0) == (HEAP8[($0 + 75 | 0) >> 0] | 0 | 0)) {
     break label$5
    }
    HEAP32[($0 + 20 | 0) >> 2] = $4 + 1 | 0;
    HEAP8[$4 >> 0] = $1;
    break label$3;
   }
   $3 = -1;
   if ((FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, $2 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$3
   }
   $3 = HEAPU8[($2 + 15 | 0) >> 0] | 0;
  }
  label$6 : {
   $6 = $2 + 16 | 0;
   if ($6 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $6;
  }
  return $3 | 0;
 }
 
 function __errno_location() {
  return 2552 | 0;
 }
 
 function __wasi_syscall_ret($0) {
  $0 = $0 | 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[(__errno_location() | 0) >> 2] = $0;
  return -1 | 0;
 }
 
 function dlmalloc($0) {
  $0 = $0 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $8 = 0, $3 = 0, $2 = 0, $11 = 0, $7 = 0, i64toi32_i32$0 = 0, $9 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $1 = 0, $10 = 0, $13 = 0, $12 = 0, $88 = 0, $101 = 0, $112 = 0, $120 = 0, $128 = 0, $222 = 0, $233 = 0, $241 = 0, $249 = 0, $284 = 0, $362 = 0, $369 = 0, $462 = 0, $473 = 0, $481 = 0, $489 = 0, $1200 = 0, $1207 = 0, $1329 = 0, $1331 = 0, $1401 = 0, $1408 = 0, $1652 = 0, $1659 = 0;
  label$1 : {
   $1 = global$0 - 16 | 0;
   $12 = $1;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $12;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            label$13 : {
             label$14 : {
              if ($0 >>> 0 > 244 >>> 0) {
               break label$14
              }
              label$15 : {
               $2 = HEAP32[(0 + 2556 | 0) >> 2] | 0;
               $3 = $0 >>> 0 < 11 >>> 0 ? 16 : ($0 + 11 | 0) & -8 | 0;
               $4 = $3 >>> 3 | 0;
               $0 = $2 >>> $4 | 0;
               if (!($0 & 3 | 0)) {
                break label$15
               }
               $3 = (($0 ^ -1 | 0) & 1 | 0) + $4 | 0;
               $5 = $3 << 3 | 0;
               $4 = HEAP32[($5 + 2604 | 0) >> 2] | 0;
               $0 = $4 + 8 | 0;
               label$16 : {
                label$17 : {
                 $6 = HEAP32[($4 + 8 | 0) >> 2] | 0;
                 $5 = $5 + 2596 | 0;
                 if (($6 | 0) != ($5 | 0)) {
                  break label$17
                 }
                 HEAP32[(0 + 2556 | 0) >> 2] = $2 & (__wasm_rotl_i32(-2 | 0, $3 | 0) | 0) | 0;
                 break label$16;
                }
                HEAP32[(0 + 2572 | 0) >> 2] | 0;
                HEAP32[($6 + 12 | 0) >> 2] = $5;
                HEAP32[($5 + 8 | 0) >> 2] = $6;
               }
               $6 = $3 << 3 | 0;
               HEAP32[($4 + 4 | 0) >> 2] = $6 | 3 | 0;
               $4 = $4 + $6 | 0;
               HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0 | 1 | 0;
               break label$3;
              }
              $7 = HEAP32[(0 + 2564 | 0) >> 2] | 0;
              if ($3 >>> 0 <= $7 >>> 0) {
               break label$13
              }
              label$18 : {
               if (!$0) {
                break label$18
               }
               label$19 : {
                label$20 : {
                 $88 = $0 << $4 | 0;
                 $0 = 2 << $4 | 0;
                 $0 = $88 & ($0 | (0 - $0 | 0) | 0) | 0;
                 $0 = ($0 & (0 - $0 | 0) | 0) + -1 | 0;
                 $101 = $0;
                 $0 = ($0 >>> 12 | 0) & 16 | 0;
                 $4 = $101 >>> $0 | 0;
                 $6 = ($4 >>> 5 | 0) & 8 | 0;
                 $112 = $6 | $0 | 0;
                 $0 = $4 >>> $6 | 0;
                 $4 = ($0 >>> 2 | 0) & 4 | 0;
                 $120 = $112 | $4 | 0;
                 $0 = $0 >>> $4 | 0;
                 $4 = ($0 >>> 1 | 0) & 2 | 0;
                 $128 = $120 | $4 | 0;
                 $0 = $0 >>> $4 | 0;
                 $4 = ($0 >>> 1 | 0) & 1 | 0;
                 $6 = ($128 | $4 | 0) + ($0 >>> $4 | 0) | 0;
                 $5 = $6 << 3 | 0;
                 $4 = HEAP32[($5 + 2604 | 0) >> 2] | 0;
                 $0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
                 $5 = $5 + 2596 | 0;
                 if (($0 | 0) != ($5 | 0)) {
                  break label$20
                 }
                 $2 = $2 & (__wasm_rotl_i32(-2 | 0, $6 | 0) | 0) | 0;
                 HEAP32[(0 + 2556 | 0) >> 2] = $2;
                 break label$19;
                }
                HEAP32[(0 + 2572 | 0) >> 2] | 0;
                HEAP32[($0 + 12 | 0) >> 2] = $5;
                HEAP32[($5 + 8 | 0) >> 2] = $0;
               }
               $0 = $4 + 8 | 0;
               HEAP32[($4 + 4 | 0) >> 2] = $3 | 3 | 0;
               $5 = $4 + $3 | 0;
               $8 = $6 << 3 | 0;
               $6 = $8 - $3 | 0;
               HEAP32[($5 + 4 | 0) >> 2] = $6 | 1 | 0;
               HEAP32[($4 + $8 | 0) >> 2] = $6;
               label$21 : {
                if (!$7) {
                 break label$21
                }
                $8 = $7 >>> 3 | 0;
                $3 = ($8 << 3 | 0) + 2596 | 0;
                $4 = HEAP32[(0 + 2576 | 0) >> 2] | 0;
                label$22 : {
                 label$23 : {
                  $8 = 1 << $8 | 0;
                  if ($2 & $8 | 0) {
                   break label$23
                  }
                  HEAP32[(0 + 2556 | 0) >> 2] = $2 | $8 | 0;
                  $8 = $3;
                  break label$22;
                 }
                 $8 = HEAP32[($3 + 8 | 0) >> 2] | 0;
                }
                HEAP32[($3 + 8 | 0) >> 2] = $4;
                HEAP32[($8 + 12 | 0) >> 2] = $4;
                HEAP32[($4 + 12 | 0) >> 2] = $3;
                HEAP32[($4 + 8 | 0) >> 2] = $8;
               }
               HEAP32[(0 + 2576 | 0) >> 2] = $5;
               HEAP32[(0 + 2564 | 0) >> 2] = $6;
               break label$3;
              }
              $9 = HEAP32[(0 + 2560 | 0) >> 2] | 0;
              if (!$9) {
               break label$13
              }
              $0 = ($9 & (0 - $9 | 0) | 0) + -1 | 0;
              $222 = $0;
              $0 = ($0 >>> 12 | 0) & 16 | 0;
              $4 = $222 >>> $0 | 0;
              $6 = ($4 >>> 5 | 0) & 8 | 0;
              $233 = $6 | $0 | 0;
              $0 = $4 >>> $6 | 0;
              $4 = ($0 >>> 2 | 0) & 4 | 0;
              $241 = $233 | $4 | 0;
              $0 = $0 >>> $4 | 0;
              $4 = ($0 >>> 1 | 0) & 2 | 0;
              $249 = $241 | $4 | 0;
              $0 = $0 >>> $4 | 0;
              $4 = ($0 >>> 1 | 0) & 1 | 0;
              $5 = HEAP32[(((($249 | $4 | 0) + ($0 >>> $4 | 0) | 0) << 2 | 0) + 2860 | 0) >> 2] | 0;
              $4 = ((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
              $6 = $5;
              label$24 : {
               label$25 : while (1) {
                label$26 : {
                 $0 = HEAP32[($6 + 16 | 0) >> 2] | 0;
                 if ($0) {
                  break label$26
                 }
                 $0 = HEAP32[($6 + 20 | 0) >> 2] | 0;
                 if (!$0) {
                  break label$24
                 }
                }
                $6 = ((HEAP32[($0 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
                $284 = $6;
                $6 = $6 >>> 0 < $4 >>> 0;
                $4 = $6 ? $284 : $4;
                $5 = $6 ? $0 : $5;
                $6 = $0;
                continue label$25;
               };
              }
              $10 = HEAP32[($5 + 24 | 0) >> 2] | 0;
              label$27 : {
               $8 = HEAP32[($5 + 12 | 0) >> 2] | 0;
               if (($8 | 0) == ($5 | 0)) {
                break label$27
               }
               label$28 : {
                $0 = HEAP32[($5 + 8 | 0) >> 2] | 0;
                if ((HEAP32[(0 + 2572 | 0) >> 2] | 0) >>> 0 > $0 >>> 0) {
                 break label$28
                }
                HEAP32[($0 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($0 + 12 | 0) >> 2] = $8;
               HEAP32[($8 + 8 | 0) >> 2] = $0;
               break label$4;
              }
              label$29 : {
               $6 = $5 + 20 | 0;
               $0 = HEAP32[$6 >> 2] | 0;
               if ($0) {
                break label$29
               }
               $0 = HEAP32[($5 + 16 | 0) >> 2] | 0;
               if (!$0) {
                break label$12
               }
               $6 = $5 + 16 | 0;
              }
              label$30 : while (1) {
               $11 = $6;
               $8 = $0;
               $6 = $0 + 20 | 0;
               $0 = HEAP32[$6 >> 2] | 0;
               if ($0) {
                continue label$30
               }
               $6 = $8 + 16 | 0;
               $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
               if ($0) {
                continue label$30
               }
               break label$30;
              };
              HEAP32[$11 >> 2] = 0;
              break label$4;
             }
             $3 = -1;
             if ($0 >>> 0 > -65 >>> 0) {
              break label$13
             }
             $0 = $0 + 11 | 0;
             $3 = $0 & -8 | 0;
             $7 = HEAP32[(0 + 2560 | 0) >> 2] | 0;
             if (!$7) {
              break label$13
             }
             $11 = 0;
             label$31 : {
              $0 = $0 >>> 8 | 0;
              if (!$0) {
               break label$31
              }
              $11 = 31;
              if ($3 >>> 0 > 16777215 >>> 0) {
               break label$31
              }
              $4 = (($0 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
              $0 = $0 << $4 | 0;
              $362 = $0;
              $0 = (($0 + 520192 | 0) >>> 16 | 0) & 4 | 0;
              $6 = $362 << $0 | 0;
              $369 = $6;
              $6 = (($6 + 245760 | 0) >>> 16 | 0) & 2 | 0;
              $0 = (($369 << $6 | 0) >>> 15 | 0) - ($0 | $4 | 0 | $6 | 0) | 0;
              $11 = ($0 << 1 | 0 | (($3 >>> ($0 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
             }
             $6 = 0 - $3 | 0;
             label$32 : {
              label$33 : {
               label$34 : {
                label$35 : {
                 $4 = HEAP32[(($11 << 2 | 0) + 2860 | 0) >> 2] | 0;
                 if ($4) {
                  break label$35
                 }
                 $0 = 0;
                 $8 = 0;
                 break label$34;
                }
                $5 = $3 << (($11 | 0) == (31 | 0) ? 0 : 25 - ($11 >>> 1 | 0) | 0) | 0;
                $0 = 0;
                $8 = 0;
                label$36 : while (1) {
                 label$37 : {
                  $2 = ((HEAP32[($4 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
                  if ($2 >>> 0 >= $6 >>> 0) {
                   break label$37
                  }
                  $6 = $2;
                  $8 = $4;
                  if ($6) {
                   break label$37
                  }
                  $6 = 0;
                  $8 = $4;
                  $0 = $4;
                  break label$33;
                 }
                 $2 = HEAP32[($4 + 20 | 0) >> 2] | 0;
                 $4 = HEAP32[(($4 + (($5 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                 $0 = $2 ? (($2 | 0) == ($4 | 0) ? $0 : $2) : $0;
                 $5 = $5 << (($4 | 0) != (0 | 0)) | 0;
                 if ($4) {
                  continue label$36
                 }
                 break label$36;
                };
               }
               label$38 : {
                if ($0 | $8 | 0) {
                 break label$38
                }
                $0 = 2 << $11 | 0;
                $0 = ($0 | (0 - $0 | 0) | 0) & $7 | 0;
                if (!$0) {
                 break label$13
                }
                $0 = ($0 & (0 - $0 | 0) | 0) + -1 | 0;
                $462 = $0;
                $0 = ($0 >>> 12 | 0) & 16 | 0;
                $4 = $462 >>> $0 | 0;
                $5 = ($4 >>> 5 | 0) & 8 | 0;
                $473 = $5 | $0 | 0;
                $0 = $4 >>> $5 | 0;
                $4 = ($0 >>> 2 | 0) & 4 | 0;
                $481 = $473 | $4 | 0;
                $0 = $0 >>> $4 | 0;
                $4 = ($0 >>> 1 | 0) & 2 | 0;
                $489 = $481 | $4 | 0;
                $0 = $0 >>> $4 | 0;
                $4 = ($0 >>> 1 | 0) & 1 | 0;
                $0 = HEAP32[(((($489 | $4 | 0) + ($0 >>> $4 | 0) | 0) << 2 | 0) + 2860 | 0) >> 2] | 0;
               }
               if (!$0) {
                break label$32
               }
              }
              label$39 : while (1) {
               $2 = ((HEAP32[($0 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
               $5 = $2 >>> 0 < $6 >>> 0;
               label$40 : {
                $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
                if ($4) {
                 break label$40
                }
                $4 = HEAP32[($0 + 20 | 0) >> 2] | 0;
               }
               $6 = $5 ? $2 : $6;
               $8 = $5 ? $0 : $8;
               $0 = $4;
               if ($0) {
                continue label$39
               }
               break label$39;
              };
             }
             if (!$8) {
              break label$13
             }
             if ($6 >>> 0 >= ((HEAP32[(0 + 2564 | 0) >> 2] | 0) - $3 | 0) >>> 0) {
              break label$13
             }
             $11 = HEAP32[($8 + 24 | 0) >> 2] | 0;
             label$41 : {
              $5 = HEAP32[($8 + 12 | 0) >> 2] | 0;
              if (($5 | 0) == ($8 | 0)) {
               break label$41
              }
              label$42 : {
               $0 = HEAP32[($8 + 8 | 0) >> 2] | 0;
               if ((HEAP32[(0 + 2572 | 0) >> 2] | 0) >>> 0 > $0 >>> 0) {
                break label$42
               }
               HEAP32[($0 + 12 | 0) >> 2] | 0;
              }
              HEAP32[($0 + 12 | 0) >> 2] = $5;
              HEAP32[($5 + 8 | 0) >> 2] = $0;
              break label$5;
             }
             label$43 : {
              $4 = $8 + 20 | 0;
              $0 = HEAP32[$4 >> 2] | 0;
              if ($0) {
               break label$43
              }
              $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
              if (!$0) {
               break label$11
              }
              $4 = $8 + 16 | 0;
             }
             label$44 : while (1) {
              $2 = $4;
              $5 = $0;
              $4 = $0 + 20 | 0;
              $0 = HEAP32[$4 >> 2] | 0;
              if ($0) {
               continue label$44
              }
              $4 = $5 + 16 | 0;
              $0 = HEAP32[($5 + 16 | 0) >> 2] | 0;
              if ($0) {
               continue label$44
              }
              break label$44;
             };
             HEAP32[$2 >> 2] = 0;
             break label$5;
            }
            label$45 : {
             $0 = HEAP32[(0 + 2564 | 0) >> 2] | 0;
             if ($0 >>> 0 < $3 >>> 0) {
              break label$45
             }
             $4 = HEAP32[(0 + 2576 | 0) >> 2] | 0;
             label$46 : {
              label$47 : {
               $6 = $0 - $3 | 0;
               if ($6 >>> 0 < 16 >>> 0) {
                break label$47
               }
               HEAP32[(0 + 2564 | 0) >> 2] = $6;
               $5 = $4 + $3 | 0;
               HEAP32[(0 + 2576 | 0) >> 2] = $5;
               HEAP32[($5 + 4 | 0) >> 2] = $6 | 1 | 0;
               HEAP32[($4 + $0 | 0) >> 2] = $6;
               HEAP32[($4 + 4 | 0) >> 2] = $3 | 3 | 0;
               break label$46;
              }
              HEAP32[(0 + 2576 | 0) >> 2] = 0;
              HEAP32[(0 + 2564 | 0) >> 2] = 0;
              HEAP32[($4 + 4 | 0) >> 2] = $0 | 3 | 0;
              $0 = $4 + $0 | 0;
              HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0 | 1 | 0;
             }
             $0 = $4 + 8 | 0;
             break label$3;
            }
            label$48 : {
             $5 = HEAP32[(0 + 2568 | 0) >> 2] | 0;
             if ($5 >>> 0 <= $3 >>> 0) {
              break label$48
             }
             $4 = $5 - $3 | 0;
             HEAP32[(0 + 2568 | 0) >> 2] = $4;
             $0 = HEAP32[(0 + 2580 | 0) >> 2] | 0;
             $6 = $0 + $3 | 0;
             HEAP32[(0 + 2580 | 0) >> 2] = $6;
             HEAP32[($6 + 4 | 0) >> 2] = $4 | 1 | 0;
             HEAP32[($0 + 4 | 0) >> 2] = $3 | 3 | 0;
             $0 = $0 + 8 | 0;
             break label$3;
            }
            label$49 : {
             label$50 : {
              if (!(HEAP32[(0 + 3028 | 0) >> 2] | 0)) {
               break label$50
              }
              $4 = HEAP32[(0 + 3036 | 0) >> 2] | 0;
              break label$49;
             }
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = -1;
             HEAP32[(i64toi32_i32$1 + 3040 | 0) >> 2] = -1;
             HEAP32[(i64toi32_i32$1 + 3044 | 0) >> 2] = i64toi32_i32$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = 4096;
             HEAP32[(i64toi32_i32$1 + 3032 | 0) >> 2] = 4096;
             HEAP32[(i64toi32_i32$1 + 3036 | 0) >> 2] = i64toi32_i32$0;
             HEAP32[(0 + 3028 | 0) >> 2] = (($1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
             HEAP32[(0 + 3048 | 0) >> 2] = 0;
             HEAP32[(0 + 3e3 | 0) >> 2] = 0;
             $4 = 4096;
            }
            $0 = 0;
            $7 = $3 + 47 | 0;
            $2 = $4 + $7 | 0;
            $11 = 0 - $4 | 0;
            $8 = $2 & $11 | 0;
            if ($8 >>> 0 <= $3 >>> 0) {
             break label$3
            }
            $0 = 0;
            label$51 : {
             $4 = HEAP32[(0 + 2996 | 0) >> 2] | 0;
             if (!$4) {
              break label$51
             }
             $6 = HEAP32[(0 + 2988 | 0) >> 2] | 0;
             $9 = $6 + $8 | 0;
             if ($9 >>> 0 <= $6 >>> 0) {
              break label$3
             }
             if ($9 >>> 0 > $4 >>> 0) {
              break label$3
             }
            }
            if ((HEAPU8[(0 + 3e3 | 0) >> 0] | 0) & 4 | 0) {
             break label$8
            }
            label$52 : {
             label$53 : {
              label$54 : {
               $4 = HEAP32[(0 + 2580 | 0) >> 2] | 0;
               if (!$4) {
                break label$54
               }
               $0 = 3004;
               label$55 : while (1) {
                label$56 : {
                 $6 = HEAP32[$0 >> 2] | 0;
                 if ($6 >>> 0 > $4 >>> 0) {
                  break label$56
                 }
                 if (($6 + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4 >>> 0) {
                  break label$53
                 }
                }
                $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
                if ($0) {
                 continue label$55
                }
                break label$55;
               };
              }
              $5 = sbrk(0 | 0) | 0;
              if (($5 | 0) == (-1 | 0)) {
               break label$9
              }
              $2 = $8;
              label$57 : {
               $0 = HEAP32[(0 + 3032 | 0) >> 2] | 0;
               $4 = $0 + -1 | 0;
               if (!($4 & $5 | 0)) {
                break label$57
               }
               $2 = ($8 - $5 | 0) + (($4 + $5 | 0) & (0 - $0 | 0) | 0) | 0;
              }
              if ($2 >>> 0 <= $3 >>> 0) {
               break label$9
              }
              if ($2 >>> 0 > 2147483646 >>> 0) {
               break label$9
              }
              label$58 : {
               $0 = HEAP32[(0 + 2996 | 0) >> 2] | 0;
               if (!$0) {
                break label$58
               }
               $4 = HEAP32[(0 + 2988 | 0) >> 2] | 0;
               $6 = $4 + $2 | 0;
               if ($6 >>> 0 <= $4 >>> 0) {
                break label$9
               }
               if ($6 >>> 0 > $0 >>> 0) {
                break label$9
               }
              }
              $0 = sbrk($2 | 0) | 0;
              if (($0 | 0) != ($5 | 0)) {
               break label$52
              }
              break label$7;
             }
             $2 = ($2 - $5 | 0) & $11 | 0;
             if ($2 >>> 0 > 2147483646 >>> 0) {
              break label$9
             }
             $5 = sbrk($2 | 0) | 0;
             if (($5 | 0) == ((HEAP32[$0 >> 2] | 0) + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0 | 0)) {
              break label$10
             }
             $0 = $5;
            }
            $5 = $0;
            label$59 : {
             if (($3 + 48 | 0) >>> 0 <= $2 >>> 0) {
              break label$59
             }
             if ($2 >>> 0 > 2147483646 >>> 0) {
              break label$59
             }
             if (($5 | 0) == (-1 | 0)) {
              break label$59
             }
             $0 = HEAP32[(0 + 3036 | 0) >> 2] | 0;
             $0 = (($7 - $2 | 0) + $0 | 0) & (0 - $0 | 0) | 0;
             if ($0 >>> 0 > 2147483646 >>> 0) {
              break label$7
             }
             label$60 : {
              if ((sbrk($0 | 0) | 0 | 0) == (-1 | 0)) {
               break label$60
              }
              $2 = $0 + $2 | 0;
              break label$7;
             }
             sbrk(0 - $2 | 0 | 0) | 0;
             break label$9;
            }
            if (($5 | 0) != (-1 | 0)) {
             break label$7
            }
            break label$9;
           }
           $8 = 0;
           break label$4;
          }
          $5 = 0;
          break label$5;
         }
         if (($5 | 0) != (-1 | 0)) {
          break label$7
         }
        }
        HEAP32[(0 + 3e3 | 0) >> 2] = HEAP32[(0 + 3e3 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8 >>> 0 > 2147483646 >>> 0) {
        break label$6
       }
       $5 = sbrk($8 | 0) | 0;
       $0 = sbrk(0 | 0) | 0;
       if ($5 >>> 0 >= $0 >>> 0) {
        break label$6
       }
       if (($5 | 0) == (-1 | 0)) {
        break label$6
       }
       if (($0 | 0) == (-1 | 0)) {
        break label$6
       }
       $2 = $0 - $5 | 0;
       if ($2 >>> 0 <= ($3 + 40 | 0) >>> 0) {
        break label$6
       }
      }
      $0 = (HEAP32[(0 + 2988 | 0) >> 2] | 0) + $2 | 0;
      HEAP32[(0 + 2988 | 0) >> 2] = $0;
      label$61 : {
       if ($0 >>> 0 <= (HEAP32[(0 + 2992 | 0) >> 2] | 0) >>> 0) {
        break label$61
       }
       HEAP32[(0 + 2992 | 0) >> 2] = $0;
      }
      label$62 : {
       label$63 : {
        label$64 : {
         label$65 : {
          $4 = HEAP32[(0 + 2580 | 0) >> 2] | 0;
          if (!$4) {
           break label$65
          }
          $0 = 3004;
          label$66 : while (1) {
           $6 = HEAP32[$0 >> 2] | 0;
           $8 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           if (($5 | 0) == ($6 + $8 | 0 | 0)) {
            break label$64
           }
           $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
           if ($0) {
            continue label$66
           }
           break label$63;
          };
         }
         label$67 : {
          label$68 : {
           $0 = HEAP32[(0 + 2572 | 0) >> 2] | 0;
           if (!$0) {
            break label$68
           }
           if ($5 >>> 0 >= $0 >>> 0) {
            break label$67
           }
          }
          HEAP32[(0 + 2572 | 0) >> 2] = $5;
         }
         $0 = 0;
         HEAP32[(0 + 3008 | 0) >> 2] = $2;
         HEAP32[(0 + 3004 | 0) >> 2] = $5;
         HEAP32[(0 + 2588 | 0) >> 2] = -1;
         HEAP32[(0 + 2592 | 0) >> 2] = HEAP32[(0 + 3028 | 0) >> 2] | 0;
         HEAP32[(0 + 3016 | 0) >> 2] = 0;
         label$69 : while (1) {
          $4 = $0 << 3 | 0;
          $6 = $4 + 2596 | 0;
          HEAP32[($4 + 2604 | 0) >> 2] = $6;
          HEAP32[($4 + 2608 | 0) >> 2] = $6;
          $0 = $0 + 1 | 0;
          if (($0 | 0) != (32 | 0)) {
           continue label$69
          }
          break label$69;
         };
         $0 = $2 + -40 | 0;
         $4 = ($5 + 8 | 0) & 7 | 0 ? (-8 - $5 | 0) & 7 | 0 : 0;
         $6 = $0 - $4 | 0;
         HEAP32[(0 + 2568 | 0) >> 2] = $6;
         $4 = $5 + $4 | 0;
         HEAP32[(0 + 2580 | 0) >> 2] = $4;
         HEAP32[($4 + 4 | 0) >> 2] = $6 | 1 | 0;
         HEAP32[(($5 + $0 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 2584 | 0) >> 2] = HEAP32[(0 + 3044 | 0) >> 2] | 0;
         break label$62;
        }
        if ((HEAPU8[($0 + 12 | 0) >> 0] | 0) & 8 | 0) {
         break label$63
        }
        if ($5 >>> 0 <= $4 >>> 0) {
         break label$63
        }
        if ($6 >>> 0 > $4 >>> 0) {
         break label$63
        }
        HEAP32[($0 + 4 | 0) >> 2] = $8 + $2 | 0;
        $0 = ($4 + 8 | 0) & 7 | 0 ? (-8 - $4 | 0) & 7 | 0 : 0;
        $6 = $4 + $0 | 0;
        HEAP32[(0 + 2580 | 0) >> 2] = $6;
        $5 = (HEAP32[(0 + 2568 | 0) >> 2] | 0) + $2 | 0;
        $0 = $5 - $0 | 0;
        HEAP32[(0 + 2568 | 0) >> 2] = $0;
        HEAP32[($6 + 4 | 0) >> 2] = $0 | 1 | 0;
        HEAP32[(($4 + $5 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 2584 | 0) >> 2] = HEAP32[(0 + 3044 | 0) >> 2] | 0;
        break label$62;
       }
       label$70 : {
        $8 = HEAP32[(0 + 2572 | 0) >> 2] | 0;
        if ($5 >>> 0 >= $8 >>> 0) {
         break label$70
        }
        HEAP32[(0 + 2572 | 0) >> 2] = $5;
        $8 = $5;
       }
       $6 = $5 + $2 | 0;
       $0 = 3004;
       label$71 : {
        label$72 : {
         label$73 : {
          label$74 : {
           label$75 : {
            label$76 : {
             label$77 : {
              label$78 : while (1) {
               if ((HEAP32[$0 >> 2] | 0 | 0) == ($6 | 0)) {
                break label$77
               }
               $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
               if ($0) {
                continue label$78
               }
               break label$76;
              };
             }
             if (!((HEAPU8[($0 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$75
             }
            }
            $0 = 3004;
            label$79 : while (1) {
             label$80 : {
              $6 = HEAP32[$0 >> 2] | 0;
              if ($6 >>> 0 > $4 >>> 0) {
               break label$80
              }
              $6 = $6 + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0;
              if ($6 >>> 0 > $4 >>> 0) {
               break label$74
              }
             }
             $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
             continue label$79;
            };
           }
           HEAP32[$0 >> 2] = $5;
           HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + $2 | 0;
           $11 = $5 + (($5 + 8 | 0) & 7 | 0 ? (-8 - $5 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($11 + 4 | 0) >> 2] = $3 | 3 | 0;
           $5 = $6 + (($6 + 8 | 0) & 7 | 0 ? (-8 - $6 | 0) & 7 | 0 : 0) | 0;
           $0 = ($5 - $11 | 0) - $3 | 0;
           $6 = $11 + $3 | 0;
           label$81 : {
            if (($4 | 0) != ($5 | 0)) {
             break label$81
            }
            HEAP32[(0 + 2580 | 0) >> 2] = $6;
            $0 = (HEAP32[(0 + 2568 | 0) >> 2] | 0) + $0 | 0;
            HEAP32[(0 + 2568 | 0) >> 2] = $0;
            HEAP32[($6 + 4 | 0) >> 2] = $0 | 1 | 0;
            break label$72;
           }
           label$82 : {
            if ((HEAP32[(0 + 2576 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
             break label$82
            }
            HEAP32[(0 + 2576 | 0) >> 2] = $6;
            $0 = (HEAP32[(0 + 2564 | 0) >> 2] | 0) + $0 | 0;
            HEAP32[(0 + 2564 | 0) >> 2] = $0;
            HEAP32[($6 + 4 | 0) >> 2] = $0 | 1 | 0;
            HEAP32[($6 + $0 | 0) >> 2] = $0;
            break label$72;
           }
           label$83 : {
            $4 = HEAP32[($5 + 4 | 0) >> 2] | 0;
            if (($4 & 3 | 0 | 0) != (1 | 0)) {
             break label$83
            }
            $7 = $4 & -8 | 0;
            label$84 : {
             label$85 : {
              if ($4 >>> 0 > 255 >>> 0) {
               break label$85
              }
              $3 = HEAP32[($5 + 12 | 0) >> 2] | 0;
              label$86 : {
               $2 = HEAP32[($5 + 8 | 0) >> 2] | 0;
               $9 = $4 >>> 3 | 0;
               $4 = ($9 << 3 | 0) + 2596 | 0;
               if (($2 | 0) == ($4 | 0)) {
                break label$86
               }
              }
              label$87 : {
               if (($3 | 0) != ($2 | 0)) {
                break label$87
               }
               HEAP32[(0 + 2556 | 0) >> 2] = (HEAP32[(0 + 2556 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9 | 0) | 0) | 0;
               break label$84;
              }
              label$88 : {
               if (($3 | 0) == ($4 | 0)) {
                break label$88
               }
              }
              HEAP32[($2 + 12 | 0) >> 2] = $3;
              HEAP32[($3 + 8 | 0) >> 2] = $2;
              break label$84;
             }
             $9 = HEAP32[($5 + 24 | 0) >> 2] | 0;
             label$89 : {
              label$90 : {
               $2 = HEAP32[($5 + 12 | 0) >> 2] | 0;
               if (($2 | 0) == ($5 | 0)) {
                break label$90
               }
               label$91 : {
                $4 = HEAP32[($5 + 8 | 0) >> 2] | 0;
                if ($8 >>> 0 > $4 >>> 0) {
                 break label$91
                }
                HEAP32[($4 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($4 + 12 | 0) >> 2] = $2;
               HEAP32[($2 + 8 | 0) >> 2] = $4;
               break label$89;
              }
              label$92 : {
               $4 = $5 + 20 | 0;
               $3 = HEAP32[$4 >> 2] | 0;
               if ($3) {
                break label$92
               }
               $4 = $5 + 16 | 0;
               $3 = HEAP32[$4 >> 2] | 0;
               if ($3) {
                break label$92
               }
               $2 = 0;
               break label$89;
              }
              label$93 : while (1) {
               $8 = $4;
               $2 = $3;
               $4 = $3 + 20 | 0;
               $3 = HEAP32[$4 >> 2] | 0;
               if ($3) {
                continue label$93
               }
               $4 = $2 + 16 | 0;
               $3 = HEAP32[($2 + 16 | 0) >> 2] | 0;
               if ($3) {
                continue label$93
               }
               break label$93;
              };
              HEAP32[$8 >> 2] = 0;
             }
             if (!$9) {
              break label$84
             }
             label$94 : {
              label$95 : {
               $3 = HEAP32[($5 + 28 | 0) >> 2] | 0;
               $4 = ($3 << 2 | 0) + 2860 | 0;
               if ((HEAP32[$4 >> 2] | 0 | 0) != ($5 | 0)) {
                break label$95
               }
               HEAP32[$4 >> 2] = $2;
               if ($2) {
                break label$94
               }
               HEAP32[(0 + 2560 | 0) >> 2] = (HEAP32[(0 + 2560 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3 | 0) | 0) | 0;
               break label$84;
              }
              HEAP32[($9 + ((HEAP32[($9 + 16 | 0) >> 2] | 0 | 0) == ($5 | 0) ? 16 : 20) | 0) >> 2] = $2;
              if (!$2) {
               break label$84
              }
             }
             HEAP32[($2 + 24 | 0) >> 2] = $9;
             label$96 : {
              $4 = HEAP32[($5 + 16 | 0) >> 2] | 0;
              if (!$4) {
               break label$96
              }
              HEAP32[($2 + 16 | 0) >> 2] = $4;
              HEAP32[($4 + 24 | 0) >> 2] = $2;
             }
             $4 = HEAP32[($5 + 20 | 0) >> 2] | 0;
             if (!$4) {
              break label$84
             }
             HEAP32[($2 + 20 | 0) >> 2] = $4;
             HEAP32[($4 + 24 | 0) >> 2] = $2;
            }
            $0 = $7 + $0 | 0;
            $5 = $5 + $7 | 0;
           }
           HEAP32[($5 + 4 | 0) >> 2] = (HEAP32[($5 + 4 | 0) >> 2] | 0) & -2 | 0;
           HEAP32[($6 + 4 | 0) >> 2] = $0 | 1 | 0;
           HEAP32[($6 + $0 | 0) >> 2] = $0;
           label$97 : {
            if ($0 >>> 0 > 255 >>> 0) {
             break label$97
            }
            $4 = $0 >>> 3 | 0;
            $0 = ($4 << 3 | 0) + 2596 | 0;
            label$98 : {
             label$99 : {
              $3 = HEAP32[(0 + 2556 | 0) >> 2] | 0;
              $4 = 1 << $4 | 0;
              if ($3 & $4 | 0) {
               break label$99
              }
              HEAP32[(0 + 2556 | 0) >> 2] = $3 | $4 | 0;
              $4 = $0;
              break label$98;
             }
             $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($0 + 8 | 0) >> 2] = $6;
            HEAP32[($4 + 12 | 0) >> 2] = $6;
            HEAP32[($6 + 12 | 0) >> 2] = $0;
            HEAP32[($6 + 8 | 0) >> 2] = $4;
            break label$72;
           }
           $4 = 0;
           label$100 : {
            $3 = $0 >>> 8 | 0;
            if (!$3) {
             break label$100
            }
            $4 = 31;
            if ($0 >>> 0 > 16777215 >>> 0) {
             break label$100
            }
            $4 = (($3 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $3 = $3 << $4 | 0;
            $1200 = $3;
            $3 = (($3 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $5 = $1200 << $3 | 0;
            $1207 = $5;
            $5 = (($5 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $4 = (($1207 << $5 | 0) >>> 15 | 0) - ($3 | $4 | 0 | $5 | 0) | 0;
            $4 = ($4 << 1 | 0 | (($0 >>> ($4 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
           }
           HEAP32[($6 + 28 | 0) >> 2] = $4;
           i64toi32_i32$1 = $6;
           i64toi32_i32$0 = 0;
           HEAP32[($6 + 16 | 0) >> 2] = 0;
           HEAP32[($6 + 20 | 0) >> 2] = i64toi32_i32$0;
           $3 = ($4 << 2 | 0) + 2860 | 0;
           label$101 : {
            label$102 : {
             $5 = HEAP32[(0 + 2560 | 0) >> 2] | 0;
             $8 = 1 << $4 | 0;
             if ($5 & $8 | 0) {
              break label$102
             }
             HEAP32[(0 + 2560 | 0) >> 2] = $5 | $8 | 0;
             HEAP32[$3 >> 2] = $6;
             HEAP32[($6 + 24 | 0) >> 2] = $3;
             break label$101;
            }
            $4 = $0 << (($4 | 0) == (31 | 0) ? 0 : 25 - ($4 >>> 1 | 0) | 0) | 0;
            $5 = HEAP32[$3 >> 2] | 0;
            label$103 : while (1) {
             $3 = $5;
             if (((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0 | 0)) {
              break label$73
             }
             $5 = $4 >>> 29 | 0;
             $4 = $4 << 1 | 0;
             $8 = ($3 + ($5 & 4 | 0) | 0) + 16 | 0;
             $5 = HEAP32[$8 >> 2] | 0;
             if ($5) {
              continue label$103
             }
             break label$103;
            };
            HEAP32[$8 >> 2] = $6;
            HEAP32[($6 + 24 | 0) >> 2] = $3;
           }
           HEAP32[($6 + 12 | 0) >> 2] = $6;
           HEAP32[($6 + 8 | 0) >> 2] = $6;
           break label$72;
          }
          $0 = $2 + -40 | 0;
          $8 = ($5 + 8 | 0) & 7 | 0 ? (-8 - $5 | 0) & 7 | 0 : 0;
          $11 = $0 - $8 | 0;
          HEAP32[(0 + 2568 | 0) >> 2] = $11;
          $8 = $5 + $8 | 0;
          HEAP32[(0 + 2580 | 0) >> 2] = $8;
          HEAP32[($8 + 4 | 0) >> 2] = $11 | 1 | 0;
          HEAP32[(($5 + $0 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 2584 | 0) >> 2] = HEAP32[(0 + 3044 | 0) >> 2] | 0;
          $0 = ($6 + (($6 + -39 | 0) & 7 | 0 ? (39 - $6 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8 = $0 >>> 0 < ($4 + 16 | 0) >>> 0 ? $4 : $0;
          HEAP32[($8 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 3012 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 3016 | 0) >> 2] | 0;
          $1329 = i64toi32_i32$0;
          i64toi32_i32$0 = $8 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1329;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 3004 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 3008 | 0) >> 2] | 0;
          $1331 = i64toi32_i32$1;
          i64toi32_i32$1 = $8;
          HEAP32[($8 + 8 | 0) >> 2] = $1331;
          HEAP32[($8 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 3012 | 0) >> 2] = $8 + 8 | 0;
          HEAP32[(0 + 3008 | 0) >> 2] = $2;
          HEAP32[(0 + 3004 | 0) >> 2] = $5;
          HEAP32[(0 + 3016 | 0) >> 2] = 0;
          $0 = $8 + 24 | 0;
          label$104 : while (1) {
           HEAP32[($0 + 4 | 0) >> 2] = 7;
           $5 = $0 + 8 | 0;
           $0 = $0 + 4 | 0;
           if ($6 >>> 0 > $5 >>> 0) {
            continue label$104
           }
           break label$104;
          };
          if (($8 | 0) == ($4 | 0)) {
           break label$62
          }
          HEAP32[($8 + 4 | 0) >> 2] = (HEAP32[($8 + 4 | 0) >> 2] | 0) & -2 | 0;
          $2 = $8 - $4 | 0;
          HEAP32[($4 + 4 | 0) >> 2] = $2 | 1 | 0;
          HEAP32[$8 >> 2] = $2;
          label$105 : {
           if ($2 >>> 0 > 255 >>> 0) {
            break label$105
           }
           $6 = $2 >>> 3 | 0;
           $0 = ($6 << 3 | 0) + 2596 | 0;
           label$106 : {
            label$107 : {
             $5 = HEAP32[(0 + 2556 | 0) >> 2] | 0;
             $6 = 1 << $6 | 0;
             if ($5 & $6 | 0) {
              break label$107
             }
             HEAP32[(0 + 2556 | 0) >> 2] = $5 | $6 | 0;
             $6 = $0;
             break label$106;
            }
            $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0 + 8 | 0) >> 2] = $4;
           HEAP32[($6 + 12 | 0) >> 2] = $4;
           HEAP32[($4 + 12 | 0) >> 2] = $0;
           HEAP32[($4 + 8 | 0) >> 2] = $6;
           break label$62;
          }
          $0 = 0;
          label$108 : {
           $6 = $2 >>> 8 | 0;
           if (!$6) {
            break label$108
           }
           $0 = 31;
           if ($2 >>> 0 > 16777215 >>> 0) {
            break label$108
           }
           $0 = (($6 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
           $6 = $6 << $0 | 0;
           $1401 = $6;
           $6 = (($6 + 520192 | 0) >>> 16 | 0) & 4 | 0;
           $5 = $1401 << $6 | 0;
           $1408 = $5;
           $5 = (($5 + 245760 | 0) >>> 16 | 0) & 2 | 0;
           $0 = (($1408 << $5 | 0) >>> 15 | 0) - ($6 | $0 | 0 | $5 | 0) | 0;
           $0 = ($0 << 1 | 0 | (($2 >>> ($0 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          i64toi32_i32$1 = $4;
          i64toi32_i32$0 = 0;
          HEAP32[($4 + 16 | 0) >> 2] = 0;
          HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[($4 + 28 | 0) >> 2] = $0;
          $6 = ($0 << 2 | 0) + 2860 | 0;
          label$109 : {
           label$110 : {
            $5 = HEAP32[(0 + 2560 | 0) >> 2] | 0;
            $8 = 1 << $0 | 0;
            if ($5 & $8 | 0) {
             break label$110
            }
            HEAP32[(0 + 2560 | 0) >> 2] = $5 | $8 | 0;
            HEAP32[$6 >> 2] = $4;
            HEAP32[($4 + 24 | 0) >> 2] = $6;
            break label$109;
           }
           $0 = $2 << (($0 | 0) == (31 | 0) ? 0 : 25 - ($0 >>> 1 | 0) | 0) | 0;
           $5 = HEAP32[$6 >> 2] | 0;
           label$111 : while (1) {
            $6 = $5;
            if (((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($2 | 0)) {
             break label$71
            }
            $5 = $0 >>> 29 | 0;
            $0 = $0 << 1 | 0;
            $8 = ($6 + ($5 & 4 | 0) | 0) + 16 | 0;
            $5 = HEAP32[$8 >> 2] | 0;
            if ($5) {
             continue label$111
            }
            break label$111;
           };
           HEAP32[$8 >> 2] = $4;
           HEAP32[($4 + 24 | 0) >> 2] = $6;
          }
          HEAP32[($4 + 12 | 0) >> 2] = $4;
          HEAP32[($4 + 8 | 0) >> 2] = $4;
          break label$62;
         }
         $0 = HEAP32[($3 + 8 | 0) >> 2] | 0;
         HEAP32[($0 + 12 | 0) >> 2] = $6;
         HEAP32[($3 + 8 | 0) >> 2] = $6;
         HEAP32[($6 + 24 | 0) >> 2] = 0;
         HEAP32[($6 + 12 | 0) >> 2] = $3;
         HEAP32[($6 + 8 | 0) >> 2] = $0;
        }
        $0 = $11 + 8 | 0;
        break label$3;
       }
       $0 = HEAP32[($6 + 8 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $4;
       HEAP32[($6 + 8 | 0) >> 2] = $4;
       HEAP32[($4 + 24 | 0) >> 2] = 0;
       HEAP32[($4 + 12 | 0) >> 2] = $6;
       HEAP32[($4 + 8 | 0) >> 2] = $0;
      }
      $0 = HEAP32[(0 + 2568 | 0) >> 2] | 0;
      if ($0 >>> 0 <= $3 >>> 0) {
       break label$6
      }
      $4 = $0 - $3 | 0;
      HEAP32[(0 + 2568 | 0) >> 2] = $4;
      $0 = HEAP32[(0 + 2580 | 0) >> 2] | 0;
      $6 = $0 + $3 | 0;
      HEAP32[(0 + 2580 | 0) >> 2] = $6;
      HEAP32[($6 + 4 | 0) >> 2] = $4 | 1 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $3 | 3 | 0;
      $0 = $0 + 8 | 0;
      break label$3;
     }
     HEAP32[(__errno_location() | 0) >> 2] = 48;
     $0 = 0;
     break label$3;
    }
    label$112 : {
     if (!$11) {
      break label$112
     }
     label$113 : {
      label$114 : {
       $4 = HEAP32[($8 + 28 | 0) >> 2] | 0;
       $0 = ($4 << 2 | 0) + 2860 | 0;
       if (($8 | 0) != (HEAP32[$0 >> 2] | 0 | 0)) {
        break label$114
       }
       HEAP32[$0 >> 2] = $5;
       if ($5) {
        break label$113
       }
       $7 = $7 & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0;
       HEAP32[(0 + 2560 | 0) >> 2] = $7;
       break label$112;
      }
      HEAP32[($11 + ((HEAP32[($11 + 16 | 0) >> 2] | 0 | 0) == ($8 | 0) ? 16 : 20) | 0) >> 2] = $5;
      if (!$5) {
       break label$112
      }
     }
     HEAP32[($5 + 24 | 0) >> 2] = $11;
     label$115 : {
      $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
      if (!$0) {
       break label$115
      }
      HEAP32[($5 + 16 | 0) >> 2] = $0;
      HEAP32[($0 + 24 | 0) >> 2] = $5;
     }
     $0 = HEAP32[($8 + 20 | 0) >> 2] | 0;
     if (!$0) {
      break label$112
     }
     HEAP32[($5 + 20 | 0) >> 2] = $0;
     HEAP32[($0 + 24 | 0) >> 2] = $5;
    }
    label$116 : {
     label$117 : {
      if ($6 >>> 0 > 15 >>> 0) {
       break label$117
      }
      $0 = $6 + $3 | 0;
      HEAP32[($8 + 4 | 0) >> 2] = $0 | 3 | 0;
      $0 = $8 + $0 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$116;
     }
     HEAP32[($8 + 4 | 0) >> 2] = $3 | 3 | 0;
     $5 = $8 + $3 | 0;
     HEAP32[($5 + 4 | 0) >> 2] = $6 | 1 | 0;
     HEAP32[($5 + $6 | 0) >> 2] = $6;
     label$118 : {
      if ($6 >>> 0 > 255 >>> 0) {
       break label$118
      }
      $4 = $6 >>> 3 | 0;
      $0 = ($4 << 3 | 0) + 2596 | 0;
      label$119 : {
       label$120 : {
        $6 = HEAP32[(0 + 2556 | 0) >> 2] | 0;
        $4 = 1 << $4 | 0;
        if ($6 & $4 | 0) {
         break label$120
        }
        HEAP32[(0 + 2556 | 0) >> 2] = $6 | $4 | 0;
        $4 = $0;
        break label$119;
       }
       $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0 + 8 | 0) >> 2] = $5;
      HEAP32[($4 + 12 | 0) >> 2] = $5;
      HEAP32[($5 + 12 | 0) >> 2] = $0;
      HEAP32[($5 + 8 | 0) >> 2] = $4;
      break label$116;
     }
     label$121 : {
      label$122 : {
       $4 = $6 >>> 8 | 0;
       if ($4) {
        break label$122
       }
       $0 = 0;
       break label$121;
      }
      $0 = 31;
      if ($6 >>> 0 > 16777215 >>> 0) {
       break label$121
      }
      $0 = (($4 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $4 = $4 << $0 | 0;
      $1652 = $4;
      $4 = (($4 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3 = $1652 << $4 | 0;
      $1659 = $3;
      $3 = (($3 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0 = (($1659 << $3 | 0) >>> 15 | 0) - ($4 | $0 | 0 | $3 | 0) | 0;
      $0 = ($0 << 1 | 0 | (($6 >>> ($0 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($5 + 28 | 0) >> 2] = $0;
     i64toi32_i32$1 = $5;
     i64toi32_i32$0 = 0;
     HEAP32[($5 + 16 | 0) >> 2] = 0;
     HEAP32[($5 + 20 | 0) >> 2] = i64toi32_i32$0;
     $4 = ($0 << 2 | 0) + 2860 | 0;
     label$123 : {
      label$124 : {
       label$125 : {
        $3 = 1 << $0 | 0;
        if ($7 & $3 | 0) {
         break label$125
        }
        HEAP32[(0 + 2560 | 0) >> 2] = $7 | $3 | 0;
        HEAP32[$4 >> 2] = $5;
        HEAP32[($5 + 24 | 0) >> 2] = $4;
        break label$124;
       }
       $0 = $6 << (($0 | 0) == (31 | 0) ? 0 : 25 - ($0 >>> 1 | 0) | 0) | 0;
       $3 = HEAP32[$4 >> 2] | 0;
       label$126 : while (1) {
        $4 = $3;
        if (((HEAP32[($4 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($6 | 0)) {
         break label$123
        }
        $3 = $0 >>> 29 | 0;
        $0 = $0 << 1 | 0;
        $2 = ($4 + ($3 & 4 | 0) | 0) + 16 | 0;
        $3 = HEAP32[$2 >> 2] | 0;
        if ($3) {
         continue label$126
        }
        break label$126;
       };
       HEAP32[$2 >> 2] = $5;
       HEAP32[($5 + 24 | 0) >> 2] = $4;
      }
      HEAP32[($5 + 12 | 0) >> 2] = $5;
      HEAP32[($5 + 8 | 0) >> 2] = $5;
      break label$116;
     }
     $0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $5;
     HEAP32[($4 + 8 | 0) >> 2] = $5;
     HEAP32[($5 + 24 | 0) >> 2] = 0;
     HEAP32[($5 + 12 | 0) >> 2] = $4;
     HEAP32[($5 + 8 | 0) >> 2] = $0;
    }
    $0 = $8 + 8 | 0;
    break label$3;
   }
   label$127 : {
    if (!$10) {
     break label$127
    }
    label$128 : {
     label$129 : {
      $6 = HEAP32[($5 + 28 | 0) >> 2] | 0;
      $0 = ($6 << 2 | 0) + 2860 | 0;
      if (($5 | 0) != (HEAP32[$0 >> 2] | 0 | 0)) {
       break label$129
      }
      HEAP32[$0 >> 2] = $8;
      if ($8) {
       break label$128
      }
      HEAP32[(0 + 2560 | 0) >> 2] = $9 & (__wasm_rotl_i32(-2 | 0, $6 | 0) | 0) | 0;
      break label$127;
     }
     HEAP32[($10 + ((HEAP32[($10 + 16 | 0) >> 2] | 0 | 0) == ($5 | 0) ? 16 : 20) | 0) >> 2] = $8;
     if (!$8) {
      break label$127
     }
    }
    HEAP32[($8 + 24 | 0) >> 2] = $10;
    label$130 : {
     $0 = HEAP32[($5 + 16 | 0) >> 2] | 0;
     if (!$0) {
      break label$130
     }
     HEAP32[($8 + 16 | 0) >> 2] = $0;
     HEAP32[($0 + 24 | 0) >> 2] = $8;
    }
    $0 = HEAP32[($5 + 20 | 0) >> 2] | 0;
    if (!$0) {
     break label$127
    }
    HEAP32[($8 + 20 | 0) >> 2] = $0;
    HEAP32[($0 + 24 | 0) >> 2] = $8;
   }
   label$131 : {
    label$132 : {
     if ($4 >>> 0 > 15 >>> 0) {
      break label$132
     }
     $0 = $4 + $3 | 0;
     HEAP32[($5 + 4 | 0) >> 2] = $0 | 3 | 0;
     $0 = $5 + $0 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$131;
    }
    HEAP32[($5 + 4 | 0) >> 2] = $3 | 3 | 0;
    $6 = $5 + $3 | 0;
    HEAP32[($6 + 4 | 0) >> 2] = $4 | 1 | 0;
    HEAP32[($6 + $4 | 0) >> 2] = $4;
    label$133 : {
     if (!$7) {
      break label$133
     }
     $8 = $7 >>> 3 | 0;
     $3 = ($8 << 3 | 0) + 2596 | 0;
     $0 = HEAP32[(0 + 2576 | 0) >> 2] | 0;
     label$134 : {
      label$135 : {
       $8 = 1 << $8 | 0;
       if ($8 & $2 | 0) {
        break label$135
       }
       HEAP32[(0 + 2556 | 0) >> 2] = $8 | $2 | 0;
       $8 = $3;
       break label$134;
      }
      $8 = HEAP32[($3 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($3 + 8 | 0) >> 2] = $0;
     HEAP32[($8 + 12 | 0) >> 2] = $0;
     HEAP32[($0 + 12 | 0) >> 2] = $3;
     HEAP32[($0 + 8 | 0) >> 2] = $8;
    }
    HEAP32[(0 + 2576 | 0) >> 2] = $6;
    HEAP32[(0 + 2564 | 0) >> 2] = $4;
   }
   $0 = $5 + 8 | 0;
  }
  label$136 : {
   $13 = $1 + 16 | 0;
   if ($13 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $13;
  }
  return $0 | 0;
 }
 
 function dlfree($0) {
  $0 = $0 | 0;
  var $2 = 0, $5 = 0, $1 = 0, $4 = 0, $3 = 0, $7 = 0, $6 = 0, $408 = 0, $415 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $1 = $0 + -8 | 0;
   $2 = HEAP32[($0 + -4 | 0) >> 2] | 0;
   $0 = $2 & -8 | 0;
   $3 = $1 + $0 | 0;
   label$2 : {
    if ($2 & 1 | 0) {
     break label$2
    }
    if (!($2 & 3 | 0)) {
     break label$1
    }
    $2 = HEAP32[$1 >> 2] | 0;
    $1 = $1 - $2 | 0;
    $4 = HEAP32[(0 + 2572 | 0) >> 2] | 0;
    if ($1 >>> 0 < $4 >>> 0) {
     break label$1
    }
    $0 = $2 + $0 | 0;
    label$3 : {
     if ((HEAP32[(0 + 2576 | 0) >> 2] | 0 | 0) == ($1 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $5 = HEAP32[($1 + 12 | 0) >> 2] | 0;
      label$5 : {
       $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
       $7 = $2 >>> 3 | 0;
       $2 = ($7 << 3 | 0) + 2596 | 0;
       if (($6 | 0) == ($2 | 0)) {
        break label$5
       }
      }
      label$6 : {
       if (($5 | 0) != ($6 | 0)) {
        break label$6
       }
       HEAP32[(0 + 2556 | 0) >> 2] = (HEAP32[(0 + 2556 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7 | 0) | 0) | 0;
       break label$2;
      }
      label$7 : {
       if (($5 | 0) == ($2 | 0)) {
        break label$7
       }
      }
      HEAP32[($6 + 12 | 0) >> 2] = $5;
      HEAP32[($5 + 8 | 0) >> 2] = $6;
      break label$2;
     }
     $7 = HEAP32[($1 + 24 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       $5 = HEAP32[($1 + 12 | 0) >> 2] | 0;
       if (($5 | 0) == ($1 | 0)) {
        break label$9
       }
       label$10 : {
        $2 = HEAP32[($1 + 8 | 0) >> 2] | 0;
        if ($4 >>> 0 > $2 >>> 0) {
         break label$10
        }
        HEAP32[($2 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($2 + 12 | 0) >> 2] = $5;
       HEAP32[($5 + 8 | 0) >> 2] = $2;
       break label$8;
      }
      label$11 : {
       $2 = $1 + 20 | 0;
       $4 = HEAP32[$2 >> 2] | 0;
       if ($4) {
        break label$11
       }
       $2 = $1 + 16 | 0;
       $4 = HEAP32[$2 >> 2] | 0;
       if ($4) {
        break label$11
       }
       $5 = 0;
       break label$8;
      }
      label$12 : while (1) {
       $6 = $2;
       $5 = $4;
       $2 = $5 + 20 | 0;
       $4 = HEAP32[$2 >> 2] | 0;
       if ($4) {
        continue label$12
       }
       $2 = $5 + 16 | 0;
       $4 = HEAP32[($5 + 16 | 0) >> 2] | 0;
       if ($4) {
        continue label$12
       }
       break label$12;
      };
      HEAP32[$6 >> 2] = 0;
     }
     if (!$7) {
      break label$2
     }
     label$13 : {
      label$14 : {
       $4 = HEAP32[($1 + 28 | 0) >> 2] | 0;
       $2 = ($4 << 2 | 0) + 2860 | 0;
       if ((HEAP32[$2 >> 2] | 0 | 0) != ($1 | 0)) {
        break label$14
       }
       HEAP32[$2 >> 2] = $5;
       if ($5) {
        break label$13
       }
       HEAP32[(0 + 2560 | 0) >> 2] = (HEAP32[(0 + 2560 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7 + ((HEAP32[($7 + 16 | 0) >> 2] | 0 | 0) == ($1 | 0) ? 16 : 20) | 0) >> 2] = $5;
      if (!$5) {
       break label$2
      }
     }
     HEAP32[($5 + 24 | 0) >> 2] = $7;
     label$15 : {
      $2 = HEAP32[($1 + 16 | 0) >> 2] | 0;
      if (!$2) {
       break label$15
      }
      HEAP32[($5 + 16 | 0) >> 2] = $2;
      HEAP32[($2 + 24 | 0) >> 2] = $5;
     }
     $2 = HEAP32[($1 + 20 | 0) >> 2] | 0;
     if (!$2) {
      break label$2
     }
     HEAP32[($5 + 20 | 0) >> 2] = $2;
     HEAP32[($2 + 24 | 0) >> 2] = $5;
     break label$2;
    }
    $2 = HEAP32[($3 + 4 | 0) >> 2] | 0;
    if (($2 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 2564 | 0) >> 2] = $0;
    HEAP32[($3 + 4 | 0) >> 2] = $2 & -2 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
    HEAP32[($1 + $0 | 0) >> 2] = $0;
    return;
   }
   if ($3 >>> 0 <= $1 >>> 0) {
    break label$1
   }
   $2 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   if (!($2 & 1 | 0)) {
    break label$1
   }
   label$16 : {
    label$17 : {
     if ($2 & 2 | 0) {
      break label$17
     }
     label$18 : {
      if ((HEAP32[(0 + 2580 | 0) >> 2] | 0 | 0) != ($3 | 0)) {
       break label$18
      }
      HEAP32[(0 + 2580 | 0) >> 2] = $1;
      $0 = (HEAP32[(0 + 2568 | 0) >> 2] | 0) + $0 | 0;
      HEAP32[(0 + 2568 | 0) >> 2] = $0;
      HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
      if (($1 | 0) != (HEAP32[(0 + 2576 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 2564 | 0) >> 2] = 0;
      HEAP32[(0 + 2576 | 0) >> 2] = 0;
      return;
     }
     label$19 : {
      if ((HEAP32[(0 + 2576 | 0) >> 2] | 0 | 0) != ($3 | 0)) {
       break label$19
      }
      HEAP32[(0 + 2576 | 0) >> 2] = $1;
      $0 = (HEAP32[(0 + 2564 | 0) >> 2] | 0) + $0 | 0;
      HEAP32[(0 + 2564 | 0) >> 2] = $0;
      HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
      HEAP32[($1 + $0 | 0) >> 2] = $0;
      return;
     }
     $0 = ($2 & -8 | 0) + $0 | 0;
     label$20 : {
      label$21 : {
       if ($2 >>> 0 > 255 >>> 0) {
        break label$21
       }
       $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
       label$22 : {
        $5 = HEAP32[($3 + 8 | 0) >> 2] | 0;
        $3 = $2 >>> 3 | 0;
        $2 = ($3 << 3 | 0) + 2596 | 0;
        if (($5 | 0) == ($2 | 0)) {
         break label$22
        }
        HEAP32[(0 + 2572 | 0) >> 2] | 0;
       }
       label$23 : {
        if (($4 | 0) != ($5 | 0)) {
         break label$23
        }
        HEAP32[(0 + 2556 | 0) >> 2] = (HEAP32[(0 + 2556 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3 | 0) | 0) | 0;
        break label$20;
       }
       label$24 : {
        if (($4 | 0) == ($2 | 0)) {
         break label$24
        }
        HEAP32[(0 + 2572 | 0) >> 2] | 0;
       }
       HEAP32[($5 + 12 | 0) >> 2] = $4;
       HEAP32[($4 + 8 | 0) >> 2] = $5;
       break label$20;
      }
      $7 = HEAP32[($3 + 24 | 0) >> 2] | 0;
      label$25 : {
       label$26 : {
        $5 = HEAP32[($3 + 12 | 0) >> 2] | 0;
        if (($5 | 0) == ($3 | 0)) {
         break label$26
        }
        label$27 : {
         $2 = HEAP32[($3 + 8 | 0) >> 2] | 0;
         if ((HEAP32[(0 + 2572 | 0) >> 2] | 0) >>> 0 > $2 >>> 0) {
          break label$27
         }
         HEAP32[($2 + 12 | 0) >> 2] | 0;
        }
        HEAP32[($2 + 12 | 0) >> 2] = $5;
        HEAP32[($5 + 8 | 0) >> 2] = $2;
        break label$25;
       }
       label$28 : {
        $2 = $3 + 20 | 0;
        $4 = HEAP32[$2 >> 2] | 0;
        if ($4) {
         break label$28
        }
        $2 = $3 + 16 | 0;
        $4 = HEAP32[$2 >> 2] | 0;
        if ($4) {
         break label$28
        }
        $5 = 0;
        break label$25;
       }
       label$29 : while (1) {
        $6 = $2;
        $5 = $4;
        $2 = $5 + 20 | 0;
        $4 = HEAP32[$2 >> 2] | 0;
        if ($4) {
         continue label$29
        }
        $2 = $5 + 16 | 0;
        $4 = HEAP32[($5 + 16 | 0) >> 2] | 0;
        if ($4) {
         continue label$29
        }
        break label$29;
       };
       HEAP32[$6 >> 2] = 0;
      }
      if (!$7) {
       break label$20
      }
      label$30 : {
       label$31 : {
        $4 = HEAP32[($3 + 28 | 0) >> 2] | 0;
        $2 = ($4 << 2 | 0) + 2860 | 0;
        if ((HEAP32[$2 >> 2] | 0 | 0) != ($3 | 0)) {
         break label$31
        }
        HEAP32[$2 >> 2] = $5;
        if ($5) {
         break label$30
        }
        HEAP32[(0 + 2560 | 0) >> 2] = (HEAP32[(0 + 2560 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0;
        break label$20;
       }
       HEAP32[($7 + ((HEAP32[($7 + 16 | 0) >> 2] | 0 | 0) == ($3 | 0) ? 16 : 20) | 0) >> 2] = $5;
       if (!$5) {
        break label$20
       }
      }
      HEAP32[($5 + 24 | 0) >> 2] = $7;
      label$32 : {
       $2 = HEAP32[($3 + 16 | 0) >> 2] | 0;
       if (!$2) {
        break label$32
       }
       HEAP32[($5 + 16 | 0) >> 2] = $2;
       HEAP32[($2 + 24 | 0) >> 2] = $5;
      }
      $2 = HEAP32[($3 + 20 | 0) >> 2] | 0;
      if (!$2) {
       break label$20
      }
      HEAP32[($5 + 20 | 0) >> 2] = $2;
      HEAP32[($2 + 24 | 0) >> 2] = $5;
     }
     HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
     HEAP32[($1 + $0 | 0) >> 2] = $0;
     if (($1 | 0) != (HEAP32[(0 + 2576 | 0) >> 2] | 0 | 0)) {
      break label$16
     }
     HEAP32[(0 + 2564 | 0) >> 2] = $0;
     return;
    }
    HEAP32[($3 + 4 | 0) >> 2] = $2 & -2 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
    HEAP32[($1 + $0 | 0) >> 2] = $0;
   }
   label$33 : {
    if ($0 >>> 0 > 255 >>> 0) {
     break label$33
    }
    $2 = $0 >>> 3 | 0;
    $0 = ($2 << 3 | 0) + 2596 | 0;
    label$34 : {
     label$35 : {
      $4 = HEAP32[(0 + 2556 | 0) >> 2] | 0;
      $2 = 1 << $2 | 0;
      if ($4 & $2 | 0) {
       break label$35
      }
      HEAP32[(0 + 2556 | 0) >> 2] = $4 | $2 | 0;
      $2 = $0;
      break label$34;
     }
     $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($0 + 8 | 0) >> 2] = $1;
    HEAP32[($2 + 12 | 0) >> 2] = $1;
    HEAP32[($1 + 12 | 0) >> 2] = $0;
    HEAP32[($1 + 8 | 0) >> 2] = $2;
    return;
   }
   $2 = 0;
   label$36 : {
    $4 = $0 >>> 8 | 0;
    if (!$4) {
     break label$36
    }
    $2 = 31;
    if ($0 >>> 0 > 16777215 >>> 0) {
     break label$36
    }
    $2 = (($4 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4 = $4 << $2 | 0;
    $408 = $4;
    $4 = (($4 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $5 = $408 << $4 | 0;
    $415 = $5;
    $5 = (($5 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2 = (($415 << $5 | 0) >>> 15 | 0) - ($4 | $2 | 0 | $5 | 0) | 0;
    $2 = ($2 << 1 | 0 | (($0 >>> ($2 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1 + 16 | 0) >> 2] = 0;
   HEAP32[($1 + 20 | 0) >> 2] = 0;
   HEAP32[($1 + 28 | 0) >> 2] = $2;
   $4 = ($2 << 2 | 0) + 2860 | 0;
   label$37 : {
    label$38 : {
     label$39 : {
      label$40 : {
       $5 = HEAP32[(0 + 2560 | 0) >> 2] | 0;
       $3 = 1 << $2 | 0;
       if ($5 & $3 | 0) {
        break label$40
       }
       HEAP32[(0 + 2560 | 0) >> 2] = $5 | $3 | 0;
       HEAP32[$4 >> 2] = $1;
       HEAP32[($1 + 24 | 0) >> 2] = $4;
       break label$39;
      }
      $2 = $0 << (($2 | 0) == (31 | 0) ? 0 : 25 - ($2 >>> 1 | 0) | 0) | 0;
      $5 = HEAP32[$4 >> 2] | 0;
      label$41 : while (1) {
       $4 = $5;
       if (((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0 | 0)) {
        break label$38
       }
       $5 = $2 >>> 29 | 0;
       $2 = $2 << 1 | 0;
       $3 = ($4 + ($5 & 4 | 0) | 0) + 16 | 0;
       $5 = HEAP32[$3 >> 2] | 0;
       if ($5) {
        continue label$41
       }
       break label$41;
      };
      HEAP32[$3 >> 2] = $1;
      HEAP32[($1 + 24 | 0) >> 2] = $4;
     }
     HEAP32[($1 + 12 | 0) >> 2] = $1;
     HEAP32[($1 + 8 | 0) >> 2] = $1;
     break label$37;
    }
    $0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
    HEAP32[($0 + 12 | 0) >> 2] = $1;
    HEAP32[($4 + 8 | 0) >> 2] = $1;
    HEAP32[($1 + 24 | 0) >> 2] = 0;
    HEAP32[($1 + 12 | 0) >> 2] = $4;
    HEAP32[($1 + 8 | 0) >> 2] = $0;
   }
   $1 = (HEAP32[(0 + 2588 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 2588 | 0) >> 2] = $1;
   if ($1) {
    break label$1
   }
   $1 = 3012;
   label$42 : while (1) {
    $0 = HEAP32[$1 >> 2] | 0;
    $1 = $0 + 8 | 0;
    if ($0) {
     continue label$42
    }
    break label$42;
   };
   HEAP32[(0 + 2588 | 0) >> 2] = -1;
  }
 }
 
 function sbrk($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   $1 = emscripten_get_sbrk_ptr() | 0;
   $2 = HEAP32[$1 >> 2] | 0;
   $0 = $2 + (($0 + 3 | 0) & -4 | 0) | 0;
   if (($0 | 0) > (-1 | 0)) {
    break label$1
   }
   HEAP32[(__errno_location() | 0) >> 2] = 48;
   return -1 | 0;
  }
  label$2 : {
   if ($0 >>> 0 <= (__wasm_memory_size() << 16 | 0) >>> 0) {
    break label$2
   }
   if (emscripten_resize_heap($0 | 0) | 0) {
    break label$2
   }
   HEAP32[(__errno_location() | 0) >> 2] = 48;
   return -1 | 0;
  }
  HEAP32[$1 >> 2] = $0;
  return $2 | 0;
 }
 
 function memcpy($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0;
  label$1 : {
   if ($2 >>> 0 < 8192 >>> 0) {
    break label$1
   }
   emscripten_memcpy_big($0 | 0, $1 | 0, $2 | 0) | 0;
   return $0 | 0;
  }
  $3 = $0 + $2 | 0;
  label$2 : {
   label$3 : {
    if (($1 ^ $0 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if (($2 | 0) >= (1 | 0)) {
       break label$5
      }
      $2 = $0;
      break label$4;
     }
     label$6 : {
      if ($0 & 3 | 0) {
       break label$6
      }
      $2 = $0;
      break label$4;
     }
     $2 = $0;
     label$7 : while (1) {
      HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
      $1 = $1 + 1 | 0;
      $2 = $2 + 1 | 0;
      if ($2 >>> 0 >= $3 >>> 0) {
       break label$4
      }
      if ($2 & 3 | 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4 = $3 & -4 | 0;
     if ($4 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5 = $4 + -64 | 0;
     if ($2 >>> 0 > $5 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2] | 0;
      HEAP32[($2 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0;
      HEAP32[($2 + 8 | 0) >> 2] = HEAP32[($1 + 8 | 0) >> 2] | 0;
      HEAP32[($2 + 12 | 0) >> 2] = HEAP32[($1 + 12 | 0) >> 2] | 0;
      HEAP32[($2 + 16 | 0) >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
      HEAP32[($2 + 20 | 0) >> 2] = HEAP32[($1 + 20 | 0) >> 2] | 0;
      HEAP32[($2 + 24 | 0) >> 2] = HEAP32[($1 + 24 | 0) >> 2] | 0;
      HEAP32[($2 + 28 | 0) >> 2] = HEAP32[($1 + 28 | 0) >> 2] | 0;
      HEAP32[($2 + 32 | 0) >> 2] = HEAP32[($1 + 32 | 0) >> 2] | 0;
      HEAP32[($2 + 36 | 0) >> 2] = HEAP32[($1 + 36 | 0) >> 2] | 0;
      HEAP32[($2 + 40 | 0) >> 2] = HEAP32[($1 + 40 | 0) >> 2] | 0;
      HEAP32[($2 + 44 | 0) >> 2] = HEAP32[($1 + 44 | 0) >> 2] | 0;
      HEAP32[($2 + 48 | 0) >> 2] = HEAP32[($1 + 48 | 0) >> 2] | 0;
      HEAP32[($2 + 52 | 0) >> 2] = HEAP32[($1 + 52 | 0) >> 2] | 0;
      HEAP32[($2 + 56 | 0) >> 2] = HEAP32[($1 + 56 | 0) >> 2] | 0;
      HEAP32[($2 + 60 | 0) >> 2] = HEAP32[($1 + 60 | 0) >> 2] | 0;
      $1 = $1 + 64 | 0;
      $2 = $2 + 64 | 0;
      if ($2 >>> 0 <= $5 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2 >>> 0 >= $4 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2] | 0;
     $1 = $1 + 4 | 0;
     $2 = $2 + 4 | 0;
     if ($2 >>> 0 < $4 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2 = $0;
    break label$2;
   }
   label$12 : {
    $4 = $3 + -4 | 0;
    if ($4 >>> 0 >= $0 >>> 0) {
     break label$12
    }
    $2 = $0;
    break label$2;
   }
   $2 = $0;
   label$13 : while (1) {
    HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
    HEAP8[($2 + 1 | 0) >> 0] = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    HEAP8[($2 + 2 | 0) >> 0] = HEAPU8[($1 + 2 | 0) >> 0] | 0;
    HEAP8[($2 + 3 | 0) >> 0] = HEAPU8[($1 + 3 | 0) >> 0] | 0;
    $1 = $1 + 4 | 0;
    $2 = $2 + 4 | 0;
    if ($2 >>> 0 <= $4 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2 >>> 0 >= $3 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($3 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0 | 0;
 }
 
 function setThrew($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   if (HEAP32[(0 + 3052 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[(0 + 3056 | 0) >> 2] = $1;
   HEAP32[(0 + 3052 | 0) >> 2] = $0;
  }
 }
 
 function fflush($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$3
     }
     return __fflush_unlocked($0 | 0) | 0 | 0;
    }
    $1 = __lockfile($0 | 0) | 0;
    $2 = __fflush_unlocked($0 | 0) | 0;
    if (!$1) {
     break label$1
    }
    __unlockfile($0 | 0);
    return $2 | 0;
   }
   $2 = 0;
   label$4 : {
    if (!(HEAP32[(0 + 1496 | 0) >> 2] | 0)) {
     break label$4
    }
    $2 = fflush(HEAP32[(0 + 1496 | 0) >> 2] | 0 | 0) | 0;
   }
   label$5 : {
    $0 = HEAP32[(__ofl_lock() | 0) >> 2] | 0;
    if (!$0) {
     break label$5
    }
    label$6 : while (1) {
     $1 = 0;
     label$7 : {
      if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$7
      }
      $1 = __lockfile($0 | 0) | 0;
     }
     label$8 : {
      if ((HEAP32[($0 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0 + 28 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      $2 = __fflush_unlocked($0 | 0) | 0 | $2 | 0;
     }
     label$9 : {
      if (!$1) {
       break label$9
      }
      __unlockfile($0 | 0);
     }
     $0 = HEAP32[($0 + 56 | 0) >> 2] | 0;
     if ($0) {
      continue label$6
     }
     break label$6;
    };
   }
   __ofl_unlock();
  }
  return $2 | 0;
 }
 
 function __fflush_unlocked($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1 = 0, $2 = 0;
  label$1 : {
   if ((HEAP32[($0 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, 0, 0) | 0;
   if (HEAP32[($0 + 20 | 0) >> 2] | 0) {
    break label$1
   }
   return -1 | 0;
  }
  label$2 : {
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if ($1 >>> 0 >= $2 >>> 0) {
    break label$2
   }
   i64toi32_i32$1 = $1 - $2 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0 + 40 | 0) >> 2] | 0 | 0]($0, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  }
  HEAP32[($0 + 28 | 0) >> 2] = 0;
  i64toi32_i32$0 = $0;
  i64toi32_i32$1 = 0;
  HEAP32[($0 + 16 | 0) >> 2] = 0;
  HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0;
  i64toi32_i32$1 = 0;
  HEAP32[($0 + 4 | 0) >> 2] = 0;
  HEAP32[($0 + 8 | 0) >> 2] = i64toi32_i32$1;
  return 0 | 0;
 }
 
 function __set_stack_limit($0) {
  $0 = $0 | 0;
  global$2 = $0;
 }
 
 function stackSave() {
  return global$0 | 0;
 }
 
 function stackAlloc($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   $1 = (global$0 - $0 | 0) & -16 | 0;
   $2 = $1;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $2;
  }
  return $1 | 0;
 }
 
 function stackRestore($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = $0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
 }
 
 function __growWasmMemory($0) {
  $0 = $0 | 0;
  return abort() | 0;
 }
 
 function dynCall_ii($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return FUNCTION_TABLE[$0 | 0]($1) | 0 | 0;
 }
 
 function dynCall_iiii($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  return FUNCTION_TABLE[$0 | 0]($1, $2, $3) | 0 | 0;
 }
 
 function dynCall_jiji($0, $1, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0 | 0]($1, $2, i64toi32_i32$0, $3) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function legalstub$dynCall_jiji($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17 = 0, $18 = 0, $6 = 0, $7 = 0, $9 = 0, $9$hi = 0, $12$hi = 0, $5 = 0, $5$hi = 0;
  $6 = $0;
  $7 = $1;
  i64toi32_i32$0 = 0;
  $9 = $2;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = dynCall_jiji($6 | 0, $7 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  setTempRet0($18 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 bufferView = HEAPU8;
 initActiveSegments(env);
 FUNCTION_TABLE[1] = __emscripten_stdout_close;
 FUNCTION_TABLE[2] = __stdio_write;
 FUNCTION_TABLE[3] = __emscripten_stdout_seek;
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "__wasm_call_ctors": __wasm_call_ctors, 
  "cc": cc, 
  "malloc": dlmalloc, 
  "ca": ca, 
  "cb": cb, 
  "check": check, 
  "__errno_location": __errno_location, 
  "fflush": fflush, 
  "setThrew": setThrew, 
  "free": dlfree, 
  "__data_end": global$1, 
  "__set_stack_limit": __set_stack_limit, 
  "stackSave": stackSave, 
  "stackAlloc": stackAlloc, 
  "stackRestore": stackRestore, 
  "__growWasmMemory": __growWasmMemory, 
  "dynCall_ii": dynCall_ii, 
  "dynCall_iiii": dynCall_iiii, 
  "dynCall_jiji": legalstub$dynCall_jiji
 };
}

var memasmFunc = new ArrayBuffer(16777216);
var retasmFunc = asmFunc(  { abort: function() { throw new Error('abort'); },
    __lock,
    __unlock,
    fd_write,
    emscripten_resize_heap,
    emscripten_memcpy_big,
    __handle_stack_overflow,
    setTempRet0,
    memory: { buffer : memasmFunc },
    table
  });
export var __wasm_call_ctors = retasmFunc.__wasm_call_ctors;
export var cc = retasmFunc.cc;
export var malloc = retasmFunc.malloc;
export var ca = retasmFunc.ca;
export var cb = retasmFunc.cb;
export var check = retasmFunc.check;
export var __errno_location = retasmFunc.__errno_location;
export var fflush = retasmFunc.fflush;
export var setThrew = retasmFunc.setThrew;
export var free = retasmFunc.free;
export var __set_stack_limit = retasmFunc.__set_stack_limit;
export var stackSave = retasmFunc.stackSave;
export var stackAlloc = retasmFunc.stackAlloc;
export var stackRestore = retasmFunc.stackRestore;
export var __growWasmMemory = retasmFunc.__growWasmMemory;
export var dynCall_ii = retasmFunc.dynCall_ii;
export var dynCall_iiii = retasmFunc.dynCall_iiii;
export var dynCall_jiji = retasmFunc.dynCall_jiji;
